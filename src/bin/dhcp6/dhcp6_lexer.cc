#line 2 "dhcp6_lexer.cc"

#line 4 "dhcp6_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer parser6__create_buffer
#define yy_delete_buffer parser6__delete_buffer
#define yy_flex_debug parser6__flex_debug
#define yy_init_buffer parser6__init_buffer
#define yy_flush_buffer parser6__flush_buffer
#define yy_load_buffer_state parser6__load_buffer_state
#define yy_switch_to_buffer parser6__switch_to_buffer
#define yyin parser6_in
#define yyleng parser6_leng
#define yylex parser6_lex
#define yylineno parser6_lineno
#define yyout parser6_out
#define yyrestart parser6_restart
#define yytext parser6_text
#define yywrap parser6_wrap
#define yyalloc parser6_alloc
#define yyrealloc parser6_realloc
#define yyfree parser6_free

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE parser6_restart(parser6_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t parser6_leng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *parser6_in, *parser6_out;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up parser6_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up parser6_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via parser6_restart()), so that the user can continue scanning by
	 * just pointing parser6_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when parser6_text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t parser6_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow parser6_wrap()'s to do buffer switches
 * instead of setting up a fresh parser6_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void parser6_restart (FILE *input_file  );
void parser6__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE parser6__create_buffer (FILE *file,int size  );
void parser6__delete_buffer (YY_BUFFER_STATE b  );
void parser6__flush_buffer (YY_BUFFER_STATE b  );
void parser6_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void parser6_pop_buffer_state (void );

static void parser6_ensure_buffer_stack (void );
static void parser6__load_buffer_state (void );
static void parser6__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER parser6__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE parser6__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE parser6__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE parser6__scan_bytes (yyconst char *bytes,yy_size_t len  );

/* %endif */

void *parser6_alloc (yy_size_t  );
void *parser6_realloc (void *,yy_size_t  );
void parser6_free (void *  );

#define yy_new_buffer parser6__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        parser6_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            parser6__create_buffer(parser6_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        parser6_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            parser6__create_buffer(parser6_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] parser6_text/parser6_in/parser6_out/yy_state_type/parser6_lineno etc. def's & init go here */
/* Begin user sect3 */

#define parser6_wrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *parser6_in = (FILE *) 0, *parser6_out = (FILE *) 0;

typedef int yy_state_type;

extern int parser6_lineno;

int parser6_lineno = 1;

extern char *parser6_text;
#define yytext_ptr parser6_text

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up parser6_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle parser6_text and parser6_leng for yymore() goes here \ */\
	parser6_leng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to parser6_text[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 213
#define YY_END_OF_BUFFER 214
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1953] =
    {   0,
      206,  206,    0,    0,    0,    0,    0,    0,    0,    0,
      214,  212,   10,   11,  212,    1,  206,  203,  206,  206,
      212,  205,  204,  212,  212,  212,  212,  212,  199,  200,
      212,  212,  212,  201,  202,    5,    5,    5,  212,  212,
      212,   10,   11,    0,    0,  194,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,  206,  206,
        0,  205,  206,    3,    2,    6,    0,  206,    0,    0,
        0,    0,    0,    0,    4,    0,    0,    9,    0,  195,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  197,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
        8,    0,    0,  167,    0,    0,  168,    0,    0,    0,

        0,    0,    0,    0,  196,  198,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  114,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  211,  209,    0,
      208,  207,    0,    0,    0,    0,    0,  166,    0,   28,
        0,   27,    0,    0,  121,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   55,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  118,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  210,  207,    0,    0,    0,    0,   29,    0,   31,
        0,    0,    0,    0,    0,    0,    0,    0,  125,    0,
        0,    0,    0,    0,    0,    0,   99,    0,    0,    0,
        0,    0,    0,    0,    0,  151,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   58,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   98,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
        0,   59,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  146,    0,  171,   51,    0,
       56,    0,    0,    0,    0,   37,   34,   33,    0,    0,
        0,  159,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  137,    0,    0,    0,    0,    0,    0,
        0,    0,  170,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   53,    0,    0,   32,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  160,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  155,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
       35,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  139,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  136,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  103,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  111,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  110,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      154,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  164,  134,    0,
        0,    0,    0,    0,    0,    0,  138,   52,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  140,    0,   60,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  191,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  117,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  153,    0,
        0,    0,    0,    0,    0,    0,   63,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       57,  102,    0,    0,    0,  150,    0,    0,    0,    0,
       50,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  142,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  192,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  112,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   41,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   16,    0,    0,  165,   14,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
        0,    0,    0,    0,    0,    0,    0,    0,  141,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  152,  169,    0,
       40,    0,  161,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   20,    0,
        0,    0,   96,    0,    0,    0,    0,    0,  163,   54,
        0,  104,    0,  190,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   82,
        0,    0,    0,    0,    0,  130,  131,    0,    0,    0,
        0,    0,    0,    0,    0,  100,    0,    0,    0,    0,
        0,    0,    0,    0,   64,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  158,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      126,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   97,  119,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   79,    0,    0,    0,
        0,    0,    0,   17,    0,   15,    0,  187,  186,    0,
        0,    0,   69,    0,    0,    0,    0,    0,   30,    0,
        0,    0,  145,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  180,    0,  189,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  113,    0,  149,    0,   43,
        0,   61,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   19,    0,    0,    0,    0,    0,    0,    0,
      115,   80,    0,    0,  157,    0,    0,    0,    0,    0,
      148,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      109,    0,    0,  133,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  107,    0,    0,    0,  172,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
        0,   68,    0,    0,    0,    0,    0,    0,  143,   47,
        0,    0,    0,   70,  185,   38,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   12,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   45,    0,    0,
        0,   44,    0,   18,    0,    0,    0,   72,    0,    0,
        0,    0,    0,  135,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   76,    0,  132,    0,    0,

        0,   62,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  105,    0,    0,    0,    0,    0,  162,
        0,    0,    0,   46,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  181,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,    0,    0,    0,    0,    0,
        0,   95,    0,    0,    0,    0,   36,    0,   48,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,    0,    0,    0,    0,    0,
        0,    0,    0,  178,    0,    0,    0,    0,  147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  116,

        0,    0,    0,    0,    0,    0,  183,    0,    0,    0,
        0,    0,    0,    0,    0,   85,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   25,   39,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  184,    0,
       13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  188,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  177,    0,   78,    0,   77,    0,   21,
       73,    0,    0,    0,    0,    0,    0,    0,    0,   65,
        0,    0,    0,  129,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  106,    0,    0,  176,    0,    0,
        0,    0,   71,    0,    0,    0,   66,    0,   23,    0,
      122,    0,    0,    0,   94,    0,    0,    0,    0,    0,
        0,    0,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   89,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   49,    0,    0,   90,    0,
        0,    0,  182,    0,    0,    0,    0,  193,   75,   74,
       22,    0,  127,  144,  123,    0,    0,    0,    0,   86,

        0,    0,    0,    0,    0,    0,    0,  174,    0,    0,
      179,    0,   88,    0,   81,    0,    0,    0,    0,  124,
        0,    0,    0,  173,    0,    0,   26,    0,    0,    0,
        0,    0,    0,    0,    0,   87,    0,    0,    0,    0,
        0,   92,    0,  128,   84,    0,    0,    0,    0,   83,
      175,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    5,    5,    5,    5,    5,
        5,    8,    9,   10,   11,   12,   13,   14,   15,   16,
       14,   17,   14,   18,   14,   14,   14,   19,    5,   20,
        5,   21,   22,    5,   23,   24,   25,   26,   27,   28,
        5,   29,    5,   30,    5,   31,    5,   32,   33,   34,
        5,   35,   36,   37,   38,   39,   40,    5,   41,    5,
       42,   43,   44,    5,   45,    5,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,    5,   73,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1961] =
    {   0,
        0,   72,   21,   31,   43,   51,   54,   60,   91,   99,
     2340, 2341,   34, 2336,  145,    0,  207, 2341,  214,  221,
       13,  228, 2341, 2316,  118,   25,    2,    6, 2341, 2341,
       73,   11,   17, 2341, 2341, 2341,  104, 2324, 2277,    0,
     2314,  108, 2331,   24,  256, 2341,   67, 2280, 2300,   84,
       75, 2300,   88,  226,   91,   89,  284,  196,  203,  279,
      193,  224,  216,   60,  242, 2280,  286,  288,  314,  300,
      319, 2263,  204,  324,  356,  329, 2282,    0,  380,  400,
      420,  427,  406, 2341,    0, 2341,  385,  443,  238,  241,
      310,  269,  299,  314, 2341, 2279, 2320, 2341,  405, 2341,

      419,  400, 2277, 2318,  326,   10,  262,  407,  224,  409,
      352,  206, 2317,    0,  480,  412, 2259,  415, 2267,  406,
     2263, 2252, 2253, 2258,  442, 2268, 2251, 2260,  327,  431,
      226, 2254, 2252,  452, 2241, 2299,  399, 2244, 2297, 2237,
     2260, 2257, 2257, 2251,  339, 2244, 2242, 2243, 2235, 2240,
     2234,  414, 2245, 2238, 2229, 2228, 2242,  454, 2280, 2227,
      450, 2239,  421, 2227,  476, 2228,  480, 2240, 2237, 2238,
      293, 2236, 2271, 2270,  439, 2216, 2216, 2220, 2216, 2208,
     2225, 2217,    0,  447,  484,  401,  457,  489,  498, 2216,
     2341,  509, 2211, 2341,  498,  504, 2341, 2265,  515, 2264,

      517, 2263,  513, 2262, 2341, 2341,  559, 2261,  533, 2220,
     2212, 2216, 2217, 2212, 2211, 2202,  529, 2253, 2247, 2211,
     2192, 2189, 2197, 2203, 2191, 2205, 2201, 2202, 2202, 2197,
     2189, 2191, 2175, 2179, 2192, 2194, 2191, 2183, 2173, 2176,
     2190, 2341, 2176, 2184,   80, 2169, 2168, 2220, 2167, 2177,
     2217,  490, 2176, 2215, 2160, 2162, 2173, 2211,  531, 2215,
     2150, 2165,  538, 2155, 2161, 2170, 2151, 2149, 2152, 2148,
     2154, 2145, 2144, 2157, 2150, 2140, 2151, 2155, 2154, 2148,
      220, 2155, 2150, 2142, 2132, 2147, 2142, 2146,  497, 2144,
     2130, 2136, 2143, 2125, 2126, 2129, 2126, 2125,  555, 2120,

     2134, 2133, 2132, 2135, 2117, 2125,  541, 2341, 2341,  542,
     2341, 2341, 2112,  519, 2159,  551, 2170, 2341,  535, 2341,
     2169, 2341, 2163,  597, 2341,  530, 2103, 2122, 2105, 2122,
     2110, 2162, 2117, 2112, 2115, 2110,  556, 2341, 2112,  584,
     2151, 2109, 2106, 2107,  542, 2111, 2151, 2099, 2094, 2091,
     2087, 2089, 2140, 2097, 2086, 2102, 2136, 2082,  620, 2095,
     2095, 2078, 2079, 2092, 2090, 2078, 2088, 2083, 2090, 2085,
     2070,  566, 2079, 2082, 2077,  536, 2076, 2072, 2122,  579,
      569, 2341, 2116, 2066, 2065, 2058, 2060, 2072, 2063, 2052,
     2069, 2058, 2063,  590, 2110, 2063,  584, 2060, 2063, 2063,

     2061, 2050, 2050, 2062,  576, 2037, 2038, 2059,  587, 2041,
     2038, 2052, 2055, 2050, 2036, 2048, 2047, 2046, 2041, 2044,
     2043, 2042, 2041,  432, 2084, 2043, 2082, 2081, 2023,  644,
     2036, 2341, 2341, 2035,  600, 2077, 2076, 2341, 2075, 2341,
      617,  671,  606, 2074, 2068, 2021, 2023, 2011, 2341, 2016,
     2022, 2025, 2008, 2023, 2010, 2009, 2341, 2019,  605, 2010,
     2007, 2019,  604, 2004, 2006, 2341, 2012, 1997, 1999, 2010,
     2008, 2003,  650, 2010, 1998, 1991, 2042, 2341, 1989, 2005,
     2039, 2043, 1999, 1993, 1995, 1996, 1980, 1997, 2031, 1982,
     1977, 1976, 1978, 1974, 1970,  602, 1989, 1963, 1970, 1975,

     1968, 1984, 2018, 2022, 2341, 1967, 1963, 2019, 1970, 1964,
     1971, 1956, 1966, 1954, 1968, 1957, 1953, 1955, 1950, 2341,
     2007, 2341, 1949, 1948, 1941, 1958, 1997, 1996, 1941, 1946,
     1955, 1949, 1943, 1952,  652, 1989, 1951, 1934, 1934, 1929,
     1925, 1931, 1936, 1929, 1937, 1941, 1924, 1982, 1923, 1975,
     1920, 1921, 1920, 1932, 1921, 2341, 1931, 2341, 2341, 1920,
     2341, 1930, 1966, 1926, 1969, 2341, 2341, 2341,  640,  639,
      666, 2341,  617, 1928, 1908, 1961, 1906, 1959, 1904, 1903,
     1902, 1909, 1902, 1910, 1913, 1895, 1895, 1910, 1909,  619,
     1908, 1907, 1891, 1906, 1888, 1935, 1902, 1940, 1884, 1886,

     1898, 1898, 1897, 2341, 1882, 1879, 1937, 1892, 1884, 1890,
     1881, 1889, 2341, 1874, 1885, 1889, 1871, 1883, 1884,  568,
     1866, 1860, 1865, 1862, 1877, 1876, 1877, 1856, 1866, 1872,
     1915, 1870, 1869, 1861, 1852, 2341, 1853, 1855, 2341, 1863,
     1902, 1901,   16, 1862, 1899, 1844, 1845, 1848, 1849, 1840,
     2341, 1854, 1840,  695, 1832, 1836, 1852, 1849, 1841, 1886,
     1838, 1845, 1883, 2341, 1829, 1827, 1841, 1825, 1839, 1842,
     1876, 1875, 1874, 1873, 1818, 1871, 1870, 2341, 1815, 1829,
      675, 1830, 1829, 1826, 1826, 1863, 1823, 1812, 1814, 2341,
     2341,  666,  663, 1806, 1823, 1815, 1802, 1796, 1817, 1858,

      656, 1852, 1812, 1850, 1849, 1801, 1795, 1798, 1806, 1809,
     1793, 1794, 1803, 1801, 1783, 1838, 1798, 1788, 1796, 1834,
     1795,  650, 1786, 1784,   92,  209,  269,  294,  313, 2341,
      502,  498,  554,  609,  614,  641,  638,  661,  660,  648,
      664,  662,  677,  674,  719,  720,  664,  677,  663,  673,
      721,  680,  729, 2341,  730,  686,  684,  686,  682,  676,
      731,  694,  683, 2341,  686,  697,  686,  699,  701,  745,
      688,  747,  690,  705, 2341,  699,  693,  704,  689,  700,
      713,  692,  698,  753,  717,  701,  701,  714,  758,  759,
      760,  707,  725,  720,  727,  722,  707,  719,  720,  726,

      713, 2341,  778,  736,  738,  728,  740,  730,  743,  734,
      740,  784,  760,  747,  729,  736,  750,  795,  745, 2341,
      743,  758,  755,  741,  748,  747,  745,  764,  761,  762,
      750,  757,  758,  767,  771,  807,  769,  759,  772,  758,
      757,  764,  820,  761,  762,  768,  784,  767,  821,  776,
     2341,  786,  786,  779,  790,  788,  833,  775,  777,  792,
      793,  781,  779,  841,  798,  784,  787, 2341, 2341,  803,
      802,  803,  808,  796,  806,  808, 2341, 2341,  808,  810,
      797,  815,  802,  800,  818,  805,  805,  856,  803,  807,
      865, 2341,  866, 2341,  811,  825,  825,  870,  818,  817,

      821,  815,  875,  828,  818,  819,  815,  825,  829,  840,
      824,  842,  837,  839,  832,  834,  835,  847,  837,  852,
      893,  850,  855,  832,  855,  839, 2341,  846,  847,  861,
      852,  850,  900,  847,  862,  880,  888,  857,  906,  868,
      908, 2341,  874,  862,  857,  858,  870,  877,  866,  867,
      863,  881,  867,  868,  878,  887,  923,  870,  888,  880,
      876,  929,  936,  893,  884, 2341,  888,  896,  898,  883,
      899,  889,  901,  895,  942,  908,  892,  893, 2341,  909,
      912,  895,  897,  955,  898,  917, 2341,  916,  919,  900,
      918,  906,  959,  917,  913,  910,  963,  912,  965,  927,

      913,  931,  930,  916,  931,  923,  919,  937,  936,  923,
     2341, 2341,  931,  978,  931, 2341,  939,  942,  935,  988,
     2341,  937,  943,  987,  938,  939,  951,  945,  949,  947,
      945,  956, 1001,  945,  950, 1004, 1005,  949,  961, 2341,
      949,  957,  955, 1006,  968,  955,  956,  965,  977,  964,
      962,  976,  977,  993,  998,  980,  985,  968,  968,  970,
      970,  990,  989,  980,  969,  986,  993, 1036,  978,  998,
      991,  995,  999,  982,  999,  990, 1045,  992,  996, 2341,
     1043,  992,  993,  993, 1014, 1011, 1051, 1000, 1018, 1019,
     1005, 1013, 1022, 1002, 1017, 1024, 1066, 1067, 2341, 1020,

     1069, 1070, 1012, 1022, 1032, 1035, 1018, 1020, 1020, 1027,
     1036, 1024, 1031, 1026, 1033, 1045, 1086, 1033, 1032, 1049,
     1090, 1040, 1044, 1042, 1040, 1035, 1096, 1097, 1047, 1099,
     1095, 1101, 1054, 2341, 1059, 1052, 1043, 1062, 1056, 1051,
     1061, 1058, 1063, 1059, 1071, 2341, 1056, 1058, 2341, 2341,
     1058, 1118, 1057, 1076, 1077, 1079, 1070, 1124, 1125, 1078,
     1063, 1077, 1085, 1067, 1072, 1111, 1102, 1134, 1089, 1089,
     1093, 1080, 1082, 1099, 1094, 1098, 1143, 1091, 1095, 2341,
     1092, 1088, 1105, 1085, 1106, 1096, 1147, 1100, 2341, 1113,
     1112, 1115, 1099, 1111, 1116, 1103, 1163, 1116, 1121, 1108,

     1119, 1111, 1117, 1113, 1131, 1132, 1133, 2341, 2341, 1131,
     2341, 1133, 2341, 1118, 1129, 1120, 1139, 1129, 1181, 1138,
     1135, 1179, 1143, 1132, 1139, 1144, 1141, 1147, 2341, 1140,
     1132, 1193, 2341, 1194, 1141, 1148, 1192, 1154, 2341, 2341,
     1151, 2341, 1142, 2341, 1142, 1145, 1159, 1164, 1147, 1158,
     1207, 1164, 1165, 1166, 1206, 1162, 1213, 1166, 1215, 2341,
     1162, 1217, 1218, 1175, 1177, 2341, 2341, 1160, 1222, 1218,
     1182, 1166, 1178, 1197, 1228, 2341, 1185, 1176, 1187, 1232,
     1179, 1194, 1230, 1182, 2341, 1178, 1194, 1182, 1196, 1197,
     1194, 1238, 1201, 1191, 1201, 1207, 1195, 1195, 1250, 1246,

     1252, 1209, 2341, 1211, 1211, 1213, 1206, 1215, 1216, 1213,
     1203, 1206, 1207, 1266, 1213, 1268, 1215, 1270, 1213, 1272,
     2341, 1230, 1209, 1224, 1218, 1221, 1234, 1237, 1236, 1234,
     1284, 1237, 2341, 2341, 1233, 1243, 1228, 1284, 1245, 1231,
     1292, 1293, 1237, 1247, 1296, 1253, 2341, 1245, 1245, 1247,
     1249, 1302, 1245, 2341, 1246, 2341, 1248, 2341, 2341, 1261,
     1264, 1265, 2341, 1252, 1260, 1312, 1261, 1293, 2341, 1315,
     1265, 1312, 2341, 1260, 1268, 1262, 1259, 1262, 1265, 1265,
     1261, 1283, 1322, 1275, 1287, 1290, 1278, 1281, 1274, 1334,
     1282, 2341, 1277, 2341, 1280, 1339, 1292, 1283, 1298, 1298,

     1301, 1301, 1298, 1342, 1304, 2341, 1296, 2341, 1297, 2341,
     1307, 2341, 1347, 1309, 1310, 1307, 1351, 1299, 1314, 1354,
     1316, 1308, 2341, 1305, 1305, 1311, 1310, 1308, 1323, 1323,
     2341, 2341, 1364, 1311, 2341, 1328, 1313, 1313, 1315, 1321,
     2341, 1330, 1377, 1320, 1330, 1341, 1339, 1383, 1337, 1346,
     2341, 1343, 1362, 2341, 1346, 1331, 1391, 1392, 1349, 1354,
     1336, 1396, 1397, 1398, 1394, 1358, 1355, 1351, 1344, 1399,
     1357, 1358, 2341, 1348, 1361, 1409, 2341, 1347, 1407, 1370,
     1366, 1411, 1359, 1364, 1362, 1421, 1377, 1365, 1424, 1374,
     1426, 1387, 1376, 1370, 1430, 1372, 1381, 1374, 1388, 1391,

     1436, 1378, 1395, 1391, 1381, 1396, 1380, 1438, 1439, 1440,
     1387, 1442, 1405, 1398, 1397, 1391, 2341, 1408, 1395, 1394,
     1450, 2341, 1391, 1409, 1458, 1428, 1460, 1413, 2341, 2341,
     1404, 1415, 1464, 2341, 2341, 2341, 1410, 1415, 1413, 1463,
     1421, 1426, 1414, 1430, 1419, 1417, 1418, 2341, 1476, 1422,
     1473, 1417, 1423, 1483, 1431, 1441, 1442, 2341, 1488, 1441,
     1485, 2341, 1443, 2341, 1434, 1449, 1437, 2341, 1447, 1448,
     1449, 1498, 1456, 2341, 1495, 1461, 1437, 1455, 1456, 1465,
     1447, 1453, 1455, 1509, 1468, 1467, 1458, 1508, 1455, 1462,
     1516, 1466, 1470, 1475, 1468, 2341, 1521, 2341, 1470, 1523,

     1465, 2341, 1468, 1478, 1522, 1470, 1485, 1472, 1487, 1473,
     1480, 1480, 1491, 2341, 1485, 1480, 1479, 1539, 1492, 2341,
     1536, 1487, 1484, 2341, 1498, 1485, 1501, 1503, 1548, 1501,
     1498, 1506, 1500, 2341, 1553, 1494, 1496, 1512, 1505, 1495,
     1511, 1512, 1506, 1522, 2341, 1512, 1564, 1524, 1508, 1562,
     1526, 2341, 1510, 1517, 1571, 1567, 2341, 1529, 2341, 1569,
     1531, 1532, 1517, 1518, 1526, 1580, 1528, 1577, 1578, 1533,
     1545, 1542, 1533, 1540, 2341, 1537, 1542, 1540, 1592, 1593,
     1541, 1551, 1538, 2341, 1553, 1554, 1555, 1556, 2341, 1546,
     1558, 1603, 1560, 1605, 1547, 1555, 1549, 1557, 1570, 2341,

     1571, 1552, 1559, 1550, 1610, 1571, 2341, 1575, 1560, 1560,
     1575, 1568, 1567, 1578, 1565, 2341, 1581, 1569, 1572, 1628,
     1586, 1577, 1589, 1580, 1589, 1591, 1595, 2341, 2341, 1588,
     1578, 1638, 1581, 1640, 1582, 1642, 1600, 1644, 2341, 1645,
     2341, 1641, 1603, 1600, 1605, 1592, 1600, 1611, 1608, 1654,
     1597, 1602, 1593, 1658, 1611, 1612, 1602, 1619, 1618, 1659,
     1603, 1622, 1623, 2341, 1620, 1669, 1626, 1627, 1672, 1629,
     1632, 1619, 1628, 2341, 1677, 2341, 1630, 2341, 1639, 2341,
     2341, 1621, 1681, 1628, 1683, 1626, 1685, 1633, 1682, 2341,
     1648, 1689, 1648, 2341, 1639, 1629, 1688, 1654, 1647, 1643,

     1697, 1640, 1642, 1647, 2341, 1643, 1645, 2341, 1650, 1660,
     1645, 1654, 2341, 1655, 1649, 1661, 2341, 1657, 2341, 1667,
     2341, 1668, 1658, 1662, 2341, 1664, 1672, 1717, 1658, 1660,
     1657, 1681, 2341, 1668, 1675, 1678, 1667, 1721, 1668, 1676,
     1685, 1686, 1687, 1688, 1681, 1676, 1677, 1677, 1683, 1683,
     1695, 1740, 2341, 1686, 1698, 1743, 1692, 1694, 1692, 1747,
     1700, 1687, 1702, 1707, 1752, 1753, 1754, 1755, 1712, 1757,
     1758, 1759, 1706, 1710, 1704, 2341, 1720, 1764, 2341, 1721,
     1706, 1724, 2341, 1715, 1729, 1725, 1718, 2341, 2341, 2341,
     2341, 1772, 2341, 2341, 2341, 1722, 1730, 1775, 1736, 2341,

     1777, 1719, 1779, 1734, 1733, 1734, 1724, 2341, 1784, 1780,
     2341, 1727, 2341, 1739, 2341, 1788, 1730, 1746, 1791, 2341,
     1752, 1749, 1741, 2341, 1791, 1740, 2341, 1752, 1745, 1800,
     1748, 1743, 1745, 1760, 1745, 2341, 1806, 1759, 1808, 1809,
     1757, 2341, 1759, 2341, 2341, 1753, 1769, 1814, 1815, 2341,
     2341, 2341, 1821, 1824, 1827, 1828, 1830, 1833, 1836, 1839
    } ;

static yyconst flex_int16_t yy_def[1961] =
    {   0,
     1953, 1953, 1954, 1954, 1953, 1953, 1953, 1953, 1953, 1953,
     1952, 1952, 1952, 1952, 1952, 1955, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1956,
     1952, 1952, 1952, 1957,   15, 1952,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1958,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1955, 1952, 1952,
     1952, 1952, 1952, 1952, 1959, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1956, 1952, 1957, 1952,

     1952,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1960,   45, 1958,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1959, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952,   45,   45, 1952,   45,   45, 1952,   45,   45,   45,

       45,   45,   45, 1960, 1952, 1952,  115,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1952,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45, 1952, 1952, 1952, 1952,
     1952, 1952, 1952,   45,   45,   45,   45, 1952,   45, 1952,
       45, 1952,   45,  115, 1952,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1952,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1952,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1952, 1952, 1952,   45,   45,   45, 1952,   45, 1952,
       45,  115,   45,   45,   45,   45,   45,   45, 1952,   45,
       45,   45,   45,   45,   45,   45, 1952,   45,   45,   45,
       45,   45,   45,   45,   45, 1952,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1952,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45, 1952,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1952,
       45, 1952,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1952,   45, 1952, 1952,   45,
     1952,   45,   45, 1952,   45, 1952, 1952, 1952,   45,   45,
       45, 1952,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45, 1952,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1952,   45,   45, 1952,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1952,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1952,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1952,
     1952,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1952,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1952,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45, 1952,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1952,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1952,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1952, 1952,   45,
       45,   45,   45,   45,   45,   45, 1952, 1952,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1952,   45, 1952,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1952,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1952,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1952,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1952,   45,
       45,   45,   45,   45,   45,   45, 1952,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1952, 1952,   45,   45,   45, 1952,   45,   45,   45,   45,
     1952,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1952,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1952,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1952,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1952,   45,   45, 1952, 1952,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1952,
       45,   45,   45,   45,   45,   45,   45,   45, 1952,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45, 1952, 1952,   45,
     1952,   45, 1952,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1952,   45,
       45,   45, 1952,   45,   45,   45,   45,   45, 1952, 1952,
       45, 1952,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1952,
       45,   45,   45,   45,   45, 1952, 1952,   45,   45,   45,
       45,   45,   45,   45,   45, 1952,   45,   45,   45,   45,
       45,   45,   45,   45, 1952,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45, 1952,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1952,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1952, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1952,   45,   45,   45,
       45,   45,   45, 1952,   45, 1952,   45, 1952, 1952,   45,
       45,   45, 1952,   45,   45,   45,   45,   45, 1952,   45,
       45,   45, 1952,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1952,   45, 1952,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45, 1952,   45, 1952,   45, 1952,
       45, 1952,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1952,   45,   45,   45,   45,   45,   45,   45,
     1952, 1952,   45,   45, 1952,   45,   45,   45,   45,   45,
     1952,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1952,   45,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1952,   45,   45,   45, 1952,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1952,   45,   45,   45,
       45, 1952,   45,   45,   45,   45,   45,   45, 1952, 1952,
       45,   45,   45, 1952, 1952, 1952,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1952,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1952,   45,   45,
       45, 1952,   45, 1952,   45,   45,   45, 1952,   45,   45,
       45,   45,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1952,   45, 1952,   45,   45,

       45, 1952,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1952,   45,   45,   45,   45,   45, 1952,
       45,   45,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1952,   45,   45,   45,   45,   45,
       45, 1952,   45,   45,   45,   45, 1952,   45, 1952,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1952,   45,   45,   45,   45,   45,
       45,   45,   45, 1952,   45,   45,   45,   45, 1952,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1952,

       45,   45,   45,   45,   45,   45, 1952,   45,   45,   45,
       45,   45,   45,   45,   45, 1952,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1952, 1952,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1952,   45,
     1952,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1952,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1952,   45, 1952,   45, 1952,   45, 1952,
     1952,   45,   45,   45,   45,   45,   45,   45,   45, 1952,
       45,   45,   45, 1952,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45, 1952,   45,   45, 1952,   45,   45,
       45,   45, 1952,   45,   45,   45, 1952,   45, 1952,   45,
     1952,   45,   45,   45, 1952,   45,   45,   45,   45,   45,
       45,   45, 1952,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1952,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1952,   45,   45, 1952,   45,
       45,   45, 1952,   45,   45,   45,   45, 1952, 1952, 1952,
     1952,   45, 1952, 1952, 1952,   45,   45,   45,   45, 1952,

       45,   45,   45,   45,   45,   45,   45, 1952,   45,   45,
     1952,   45, 1952,   45, 1952,   45,   45,   45,   45, 1952,
       45,   45,   45, 1952,   45,   45, 1952,   45,   45,   45,
       45,   45,   45,   45,   45, 1952,   45,   45,   45,   45,
       45, 1952,   45, 1952, 1952,   45,   45,   45,   45, 1952,
     1952,    0, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952
    } ;

static yyconst flex_int16_t yy_nxt[2415] =
    {   0,
     1952,   13,   14,   13, 1952,   15,   16, 1952,   17,   18,
       19,   20,   21,   22,   22,   22,   22,   22,   23,   24,
       84,  764,   37,   14,   37,   85,   25,   26,   38,  100,
     1952,   27,   37,   14,   37,   42,   28,   42,   38,   90,
       91,   29,  196,   30,   13,   14,   13,   89,   90,   25,
       31,   91,   13,   14,   13,   13,   14,   13,   32,   40,
      765,   13,   14,   13,   33,   40,  101,   90,   91,  196,
       89,   34,   35,   13,   14,   13,   93,   15,   16,   94,
       17,   18,   19,   20,   21,   22,   22,   22,   22,   22,
       23,   24,   13,   14,   13,   89,   39,  102,   25,   26,

       13,   14,   13,   27,   39,   42,  105,   42,   28,   42,
      106,   42,   41,   29,  108,   30,  111,  112,   92,  134,
       41,   25,   31,  102,  135,  364,   87,  136,   87,  105,
       32,   88,   88,   88,   88,   88,   33,  108,  106,  111,
      849,  112,  365,   34,   35,   44,   44,   44,   45,   45,
       46,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   47,   45,   45,
       48,   49,   50,   45,   51,   52,   53,   45,   45,   45,
       45,   54,   55,   45,   56,   45,   45,   57,   45,   45,
       58,   45,   59,   60,   61,   62,   63,   64,   65,   51,

       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   56,   45,   45,   45,   45,   45,   79,  850,
       80,   80,   80,   80,   80,   79,  102,   82,   82,   82,
       82,   82,  203,   81,   83,   83,   83,   83,   83,   79,
       81,   82,   82,   82,   82,   82,  105,   81,  118,  164,
      109,  129,  116,  165,   81,  203,   81,  200,  117,  119,
      110,  130,  120,   81,  121,  132,  122,  197,  184,  105,
       81,  185,  133,  109,  851,  233,  404,   81,   45,  405,
      131,   45,   45,   45,  200,   45,   45,   45,  110,  114,
      137,  234,   45,   45,  184,   45,   45,  185,  198,  184,

      138,   45,  139,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,  123,  187,   45,  124,  125,  185,
       45,  126,  127,  145,   45,  141,  142,  146,  294,  143,
      108,  147,   45,  852,  128,  144,   45,  186,   45,  115,
      153,  186,  295,  148,  111,  188,  195,  149,  154,  150,
      155,  151,  853,  152,  158,  156,  157,  159,  160,  166,
      173,  174,  228,  167,  229,  186,  168,  111,  161,  189,
      109,  162,  195,  169,  170,  202,  251,  180,  171,  172,
      110,  230,  181,   83,   83,   83,   83,   83,   88,   88,

       88,   88,   88,  175,  242,  176,   81,  252,  177,  178,
      100,   79,  202,   80,   80,   80,   80,   80,  110,   83,
       83,   83,   83,   83,   99,  179,   81,  309,   87,   81,
       87,   99,   81,   88,   88,   88,   88,   88,   79,  192,
       82,   82,   82,   82,   82,  199,  201,  101,  243,   81,
      309,  192,  199,   81,  215,   81,   88,   88,   88,   88,
       88,   99,  211,  216,  217,   99,  275,  192,  208,   99,
      276,  212,  200,  199,  201,  213,   81,   99,  231,  209,
      259,   99,  307,   99,   99,  206,  278,  554,  222,  223,
      555,  232,  307,  207,  207,  207,  207,  207,  224,  299,

      372,  265,  207,  207,  207,  207,  207,  207,  237,  271,
      307,  238,  272,  273,  308,  239,  266,  267,  268,  308,
      310,  279,  280,  281,  309,  207,  207,  207,  207,  207,
      207,  314,  282,  316,  283,  317,  284,  285,  288,  286,
      308,  319,  289,  321,  323,  311,  290,  312,  385,  854,
      413,  855,  463,  373,  314,  314,  374,  319,  464,  435,
      320,  316,  317,  414,  319,  424,  321,  432,  432,  439,
      435,  323,  324,  324,  324,  324,  324,  437,  326,  334,
      381,  324,  324,  324,  324,  324,  324,  335,  435,  457,
      432,  433,  336,  337,  458,  520,  501,  439,  386,  443,

      437,  454,  502,  439,  324,  324,  324,  324,  324,  324,
      442,  442,  442,  442,  442,  742,  743,  856,  455,  442,
      442,  442,  442,  442,  442,  478,  494,  495,  496,  506,
      479,  508,  497,  524,  533,  565,  538,  525,  534,  507,
      539,  565,  442,  442,  442,  442,  442,  442,  569,  561,
      570,  627,  594,  521,  562,  604,  585,  664,  857,  858,
      605,  628,  665,  565,  586,  595,  587,  588,  589,  571,
      590,  691,  692,  693,  695,  569,  694,  570,  480,  713,
      802,  696,  714,  481,   45,   45,   45,   45,   45,  813,
      859,  860,  803,   45,   45,   45,   45,   45,   45,  692,

      775,  693,  812,  821,  822,  776,  823,  844,  861,  862,
      863,  845,  813,  864,  865,  846,   45,   45,   45,   45,
       45,   45,  866,  867,  868,  869,  870,  871,  872,  873,
      812,  875,  874,  876,  877,  878,  879,  880,  881,  882,
      883,  884,  885,  886,  777,  887,  888,  889,  890,  891,
      892,  893,  894,  895,  896,  897,  898,  899,  900,  901,
      902,  903,  904,  905,  906,  907,  908,  909,  910,  911,
      912,  913,  914,  915,  917,  918,  921,  922,  923,  925,
      916,  926,  919,  927,  924,  928,  920,  929,  930,  931,
      932,  933,  934,  935,  936,  937,  938,  939,  940,  941,

      942,  943,  944,  945,  946,  947,  948,  949,  950,  951,
      952,  953,  954,  955,  956,  957,  958,  959,  960,  961,
      962,  963,  964,  937,  965,  966,  967,  968,  969,  970,
      971,  972,  973,  974,  975,  976,  977,  978,  979,  981,
      982,  983,  984,  980,  985,  986,  987,  988,  989,  990,
      991,  992,  993,  994,  995,  996,  997,  998,  999, 1000,
     1001, 1002, 1003, 1004, 1006, 1007, 1008, 1005, 1009, 1010,
     1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
     1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
     1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041,

     1042, 1043, 1044, 1045, 1046, 1047, 1048, 1037, 1049, 1050,
     1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
     1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
     1071, 1072, 1073, 1074, 1075, 1076, 1077, 1055, 1078, 1079,
     1054, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
     1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
     1099, 1102, 1103, 1104, 1105, 1100, 1106, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130,
     1131, 1132, 1133, 1134, 1135, 1125, 1136, 1137, 1138, 1139,

     1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
     1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1101, 1158,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1167,
     1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
     1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
     1189, 1190, 1191, 1192, 1193, 1166, 1167, 1194, 1195, 1196,
     1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
     1207, 1208, 1209, 1210, 1211, 1213, 1215, 1216, 1217, 1212,
     1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
     1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,

     1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
     1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1214,
     1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
     1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
     1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
     1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
     1274, 1297, 1298, 1299, 1300, 1301, 1275, 1302, 1303, 1304,
     1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
     1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
     1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,

     1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
     1345, 1346, 1347, 1348, 1349, 1350, 1351, 1353, 1354, 1355,
     1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1375, 1376,
     1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
     1368, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1352,
     1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
     1415, 1374, 1417, 1418, 1419, 1420, 1421, 1422, 1416, 1423,
     1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,

     1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1443, 1444,
     1445, 1446, 1442, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
     1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
     1474, 1475, 1453, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
     1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
     1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
     1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
     1513, 1514, 1517, 1515, 1518, 1519, 1520, 1521, 1522, 1516,
     1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,

     1533, 1534, 1535, 1536, 1537, 1538, 1540, 1541, 1542, 1543,
     1544, 1545, 1546, 1547, 1548, 1549, 1539, 1550, 1551, 1552,
     1526, 1553, 1554, 1555, 1556, 1557, 1558, 1560, 1561, 1562,
     1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
     1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
     1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
     1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
     1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
     1613, 1614, 1616, 1617, 1559, 1618, 1615, 1619, 1620, 1621,
     1622, 1623, 1597, 1624, 1625, 1626, 1627, 1628, 1629, 1630,

     1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640,
     1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
     1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660,
     1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
     1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
     1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690,
     1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
     1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
     1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
     1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,

     1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
     1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
     1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
     1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
     1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
     1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
     1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
     1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
     1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
     1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,

     1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
     1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
     1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
     1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
     1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
     1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
     1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
     1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
     1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
     1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1930, 1929,

     1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
     1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
     1951,   12,   12,   12,   36,   36,   36,   78,   97,   78,
       99,   99,   99,  113,  113,  113,  183,  848,  183,  204,
      204,  204,  847,  843,  842,  841,  840,  839,  838,  837,
      836,  835,  834,  833,  832,  831,  830,  829,  828,  827,
      826,  825,  824,  820,  819,  818,  817,  816,  815,  814,
      811,  810,  809,  808,  807,  806,  805,  804,  801,  800,
      799,  798,  797,  796,  795,  794,  793,  792,  791,  790,
      789,  788,  787,  786,  785,  784,  783,  782,  781,  780,

      779,  778,  774,  773,  772,  771,  770,  769,  768,  767,
      766,  763,  762,  761,  760,  759,  758,  757,  756,  755,
      754,  753,  752,  751,  750,  749,  748,  747,  746,  745,
      744,  741,  740,  739,  738,  737,  736,  735,  734,  733,
      732,  731,  730,  729,  728,  727,  726,  725,  724,  723,
      722,  721,  720,  719,  718,  717,  716,  715,  712,  711,
      710,  709,  708,  707,  706,  705,  704,  703,  702,  701,
      700,  699,  698,  697,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  682,  681,  680,  679,  678,  677,  676,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,

      663,  662,  661,  660,  659,  658,  657,  656,  655,  654,
      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  626,  625,  624,  623,  622,
      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  603,  602,  601,  600,
      599,  598,  597,  596,  593,  592,  591,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  575,  574,  573,  572,
      568,  567,  566,  564,  563,  560,  559,  558,  557,  556,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,

      543,  542,  541,  540,  537,  536,  535,  532,  531,  530,
      529,  528,  527,  526,  523,  522,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  505,  504,  503,
      500,  499,  498,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  477,  476,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  462,  461,
      460,  459,  456,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  441,  440,  438,  436,  434,  431,  430,
      429,  428,  427,  426,  425,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  412,  411,  410,  409,  408,  407,

      406,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  384,  383,
      382,  380,  379,  378,  377,  376,  375,  371,  370,  369,
      368,  367,  366,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  333,
      332,  331,  330,  329,  328,  327,  325,  205,  322,  320,
      318,  315,  313,  306,  305,  304,  303,  302,  301,  300,
      298,  297,  296,  293,  292,  291,  287,  277,  274,  270,
      269,  264,  263,  262,  261,  260,  258,  257,  256,  255,

      254,  253,  250,  249,  248,  247,  246,  245,  244,  241,
      240,  236,  235,  227,  226,  225,  221,  220,  219,  218,
      214,  210,  205,  194,  193,  191,  190,  182,  163,  140,
      107,  104,  103,   43,   98,   96,   95,   86,   43, 1952,
       11, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952
    } ;

static yyconst flex_int16_t yy_chk[2415] =
    {   0,
        0,    1,    1,    1,    0,    1,    1,    0,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       21,  643,    3,    3,    3,   21,    1,    1,    3,   44,
        0,    1,    4,    4,    4,   13,    1,   13,    4,   27,
       28,    1,  106,    1,    5,    5,    5,   26,   32,    1,
        1,   33,    6,    6,    6,    7,    7,    7,    1,    7,
      643,    8,    8,    8,    1,    8,   44,   27,   28,  106,
       26,    1,    1,    2,    2,    2,   32,    2,    2,   33,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    9,    9,    9,   31,    5,   47,    2,    2,

       10,   10,   10,    2,    6,   37,   50,   37,    2,   42,
       51,   42,    9,    2,   53,    2,   55,   56,   31,   64,
       10,    2,    2,   47,   64,  245,   25,   64,   25,   50,
        2,   25,   25,   25,   25,   25,    2,   53,   51,   55,
      725,   56,  245,    2,    2,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   17,  726,
       17,   17,   17,   17,   17,   19,   58,   19,   19,   19,
       19,   19,  112,   17,   20,   20,   20,   20,   20,   22,
       19,   22,   22,   22,   22,   22,   62,   20,   59,   73,
       54,   61,   58,   73,   22,  112,   17,  109,   58,   59,
       54,   61,   59,   19,   59,   63,   59,  107,   89,   62,
       20,   90,   63,   54,  727,  131,  281,   22,   45,  281,
       62,   45,   45,   45,  109,   45,   45,   45,   54,   57,
       65,  131,   45,   45,   89,   45,   57,   90,  107,   92,

       65,   45,   65,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   60,   92,   57,   60,   60,   93,
       57,   60,   60,   68,   57,   67,   67,   68,  171,   67,
       69,   68,   57,  728,   60,   67,   57,   91,   57,   57,
       70,   94,  171,   68,   76,   93,  105,   68,   70,   69,
       70,   69,  729,   69,   71,   70,   70,   71,   71,   74,
       75,   75,  129,   74,  129,   91,   74,   76,   71,   94,
       75,   71,  105,   74,   74,  111,  145,   76,   74,   74,
       75,  129,   76,   79,   79,   79,   79,   79,   87,   87,

       87,   87,   87,   75,  137,   75,   79,  145,   75,   75,
       99,   80,  111,   80,   80,   80,   80,   80,   75,   83,
       83,   83,   83,   83,  101,   75,   80,  186,   81,   79,
       81,  101,   83,   81,   81,   81,   81,   81,   82,  102,
       82,   82,   82,   82,   82,  108,  110,   99,  137,   80,
      186,  116,  152,   82,  120,   83,   88,   88,   88,   88,
       88,  101,  118,  120,  120,  101,  163,  102,  116,  101,
      163,  118,  175,  108,  110,  118,   82,  101,  130,  116,
      152,  101,  184,  101,  101,  115,  165,  424,  125,  125,
      424,  130,  187,  115,  115,  115,  115,  115,  125,  175,

      252,  158,  115,  115,  115,  115,  115,  115,  134,  161,
      184,  134,  161,  161,  185,  134,  158,  158,  158,  188,
      187,  165,  165,  165,  189,  115,  115,  115,  115,  115,
      115,  192,  165,  195,  165,  196,  165,  165,  167,  165,
      185,  199,  167,  201,  203,  188,  167,  189,  263,  731,
      289,  732,  345,  252,  192,  209,  252,  259,  345,  314,
      299,  195,  196,  289,  199,  299,  201,  307,  310,  319,
      326,  203,  207,  207,  207,  207,  207,  316,  209,  217,
      259,  207,  207,  207,  207,  207,  207,  217,  314,  340,
      307,  310,  217,  217,  340,  394,  376,  319,  263,  326,

      316,  337,  376,  381,  207,  207,  207,  207,  207,  207,
      324,  324,  324,  324,  324,  620,  620,  733,  337,  324,
      324,  324,  324,  324,  324,  359,  372,  372,  372,  380,
      359,  381,  372,  397,  405,  435,  409,  397,  405,  380,
      409,  443,  324,  324,  324,  324,  324,  324,  441,  430,
      441,  496,  463,  394,  430,  473,  459,  535,  734,  735,
      473,  496,  535,  435,  459,  463,  459,  459,  459,  443,
      459,  571,  569,  570,  573,  441,  571,  441,  359,  590,
      681,  573,  590,  359,  442,  442,  442,  442,  442,  693,
      736,  737,  681,  442,  442,  442,  442,  442,  442,  569,

      654,  570,  692,  701,  701,  654,  701,  722,  738,  739,
      740,  722,  693,  741,  742,  722,  442,  442,  442,  442,
      442,  442,  743,  744,  745,  746,  747,  748,  749,  750,
      692,  751,  750,  752,  753,  755,  756,  757,  758,  759,
      760,  761,  762,  763,  654,  765,  766,  767,  768,  769,
      770,  771,  772,  773,  774,  776,  777,  778,  779,  780,
      781,  782,  783,  784,  785,  786,  787,  788,  789,  790,
      791,  792,  793,  794,  795,  796,  797,  798,  799,  800,
      794,  801,  796,  803,  799,  804,  796,  805,  806,  807,
      808,  809,  810,  811,  812,  813,  814,  815,  816,  817,

      818,  819,  821,  822,  823,  824,  825,  826,  827,  828,
      829,  830,  831,  832,  833,  834,  835,  836,  837,  838,
      839,  840,  841,  813,  842,  843,  844,  845,  846,  847,
      848,  849,  850,  852,  853,  854,  855,  856,  857,  858,
      859,  860,  861,  857,  862,  863,  864,  865,  866,  867,
      870,  871,  872,  873,  874,  875,  876,  879,  880,  881,
      882,  883,  884,  885,  886,  887,  888,  885,  889,  890,
      891,  893,  895,  896,  897,  898,  899,  900,  901,  902,
      903,  904,  905,  906,  907,  908,  909,  910,  911,  912,
      913,  914,  915,  916,  917,  918,  919,  920,  921,  922,

      923,  924,  925,  926,  928,  929,  930,  918,  931,  932,
      933,  934,  935,  936,  937,  938,  939,  940,  941,  943,
      944,  945,  946,  947,  948,  949,  950,  951,  952,  953,
      954,  955,  956,  957,  958,  959,  960,  937,  961,  962,
      936,  963,  964,  965,  967,  968,  969,  970,  971,  972,
      973,  974,  975,  976,  977,  978,  980,  981,  982,  983,
      984,  985,  986,  988,  989,  984,  990,  991,  992,  993,
      994,  995,  996,  997,  998,  999, 1000, 1001, 1002, 1003,
     1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015,
     1017, 1018, 1019, 1020, 1022, 1008, 1023, 1024, 1025, 1026,

     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
     1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045,  984, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1055,
     1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
     1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
     1077, 1078, 1079, 1081, 1082, 1054, 1055, 1083, 1084, 1085,
     1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
     1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1101,
     1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,

     1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136,
     1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1102,
     1147, 1148, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
     1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190,
     1166, 1191, 1192, 1193, 1194, 1195, 1167, 1196, 1197, 1198,
     1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1210,
     1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1234,

     1235, 1236, 1237, 1238, 1241, 1243, 1245, 1246, 1247, 1248,
     1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
     1259, 1261, 1262, 1263, 1264, 1265, 1268, 1269, 1270, 1271,
     1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282,
     1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
     1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304,
     1274, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1255,
     1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1323,
     1324, 1280, 1325, 1326, 1327, 1328, 1329, 1330, 1324, 1331,
     1332, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,

     1344, 1345, 1346, 1348, 1349, 1350, 1351, 1352, 1353, 1355,
     1357, 1360, 1352, 1361, 1362, 1364, 1365, 1366, 1367, 1368,
     1370, 1371, 1372, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
     1391, 1393, 1368, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
     1402, 1403, 1404, 1405, 1407, 1409, 1411, 1413, 1414, 1415,
     1416, 1417, 1418, 1419, 1420, 1421, 1422, 1424, 1425, 1426,
     1427, 1428, 1429, 1430, 1433, 1434, 1436, 1437, 1438, 1439,
     1440, 1442, 1443, 1442, 1444, 1445, 1446, 1447, 1448, 1442,
     1449, 1450, 1452, 1453, 1455, 1456, 1457, 1458, 1459, 1460,

     1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
     1471, 1472, 1474, 1475, 1476, 1478, 1466, 1479, 1480, 1481,
     1453, 1482, 1483, 1484, 1485, 1485, 1486, 1487, 1488, 1489,
     1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
     1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
     1510, 1511, 1512, 1513, 1514, 1515, 1516, 1518, 1519, 1520,
     1521, 1523, 1524, 1525, 1526, 1527, 1528, 1531, 1532, 1533,
     1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
     1547, 1549, 1550, 1551, 1486, 1552, 1549, 1553, 1554, 1555,
     1556, 1557, 1526, 1559, 1560, 1561, 1563, 1565, 1566, 1567,

     1569, 1570, 1571, 1572, 1573, 1575, 1576, 1577, 1578, 1579,
     1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
     1590, 1591, 1592, 1593, 1594, 1595, 1597, 1599, 1600, 1601,
     1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
     1613, 1615, 1616, 1617, 1618, 1619, 1621, 1622, 1623, 1625,
     1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1635, 1636,
     1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1646, 1647,
     1648, 1649, 1650, 1651, 1653, 1654, 1655, 1656, 1658, 1660,
     1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
     1671, 1672, 1673, 1674, 1676, 1677, 1678, 1679, 1680, 1681,

     1682, 1683, 1685, 1686, 1687, 1688, 1690, 1691, 1692, 1693,
     1694, 1695, 1696, 1697, 1698, 1699, 1701, 1702, 1703, 1704,
     1705, 1706, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
     1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
     1727, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
     1740, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
     1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
     1761, 1762, 1763, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
     1772, 1773, 1775, 1777, 1779, 1782, 1783, 1784, 1785, 1786,
     1787, 1788, 1789, 1791, 1792, 1793, 1795, 1796, 1797, 1798,

     1799, 1800, 1801, 1802, 1803, 1804, 1806, 1807, 1809, 1810,
     1811, 1812, 1814, 1815, 1816, 1818, 1820, 1822, 1823, 1824,
     1826, 1827, 1828, 1829, 1830, 1831, 1832, 1834, 1835, 1836,
     1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
     1847, 1848, 1849, 1850, 1851, 1852, 1854, 1855, 1856, 1857,
     1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
     1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1877, 1878,
     1880, 1881, 1882, 1884, 1885, 1886, 1887, 1892, 1896, 1897,
     1898, 1899, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1909,
     1910, 1912, 1914, 1916, 1917, 1918, 1919, 1921, 1922, 1921,

     1923, 1925, 1926, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
     1935, 1937, 1938, 1939, 1940, 1941, 1943, 1946, 1947, 1948,
     1949, 1953, 1953, 1953, 1954, 1954, 1954, 1955, 1956, 1955,
     1957, 1957, 1957, 1958, 1958, 1958, 1959,  724, 1959, 1960,
     1960, 1960,  723,  721,  720,  719,  718,  717,  716,  715,
      714,  713,  712,  711,  710,  709,  708,  707,  706,  705,
      704,  703,  702,  700,  699,  698,  697,  696,  695,  694,
      689,  688,  687,  686,  685,  684,  683,  682,  680,  679,
      677,  676,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  665,  663,  662,  661,  660,  659,  658,  657,

      656,  655,  653,  652,  650,  649,  648,  647,  646,  645,
      644,  642,  641,  640,  638,  637,  635,  634,  633,  632,
      631,  630,  629,  628,  627,  626,  625,  624,  623,  622,
      621,  619,  618,  617,  616,  615,  614,  612,  611,  610,
      609,  608,  607,  606,  605,  603,  602,  601,  600,  599,
      598,  597,  596,  595,  594,  593,  592,  591,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  580,  579,  578,
      577,  576,  575,  574,  565,  564,  563,  562,  560,  557,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,

      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  521,  519,  518,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  504,  503,  502,
      501,  500,  499,  498,  497,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
      480,  479,  477,  476,  475,  474,  472,  471,  470,  469,
      468,  467,  465,  464,  462,  461,  460,  458,  456,  455,
      454,  453,  452,  451,  450,  448,  447,  446,  445,  444,
      439,  437,  436,  434,  431,  429,  428,  427,  426,  425,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,

      413,  412,  411,  410,  408,  407,  406,  404,  403,  402,
      401,  400,  399,  398,  396,  395,  393,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  379,  378,  377,
      375,  374,  373,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  344,  343,
      342,  341,  339,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  323,  321,  317,  315,  313,  306,  305,
      304,  303,  302,  301,  300,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  288,  287,  286,  285,  284,  283,

      282,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  262,  261,
      260,  258,  257,  256,  255,  254,  253,  251,  250,  249,
      248,  247,  246,  244,  243,  241,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  216,
      215,  214,  213,  212,  211,  210,  208,  204,  202,  200,
      198,  193,  190,  182,  181,  180,  179,  178,  177,  176,
      174,  173,  172,  170,  169,  168,  166,  164,  162,  160,
      159,  157,  156,  155,  154,  153,  151,  150,  149,  148,

      147,  146,  144,  143,  142,  141,  140,  139,  138,  136,
      135,  133,  132,  128,  127,  126,  124,  123,  122,  121,
      119,  117,  113,  104,  103,   97,   96,   77,   72,   66,
       52,   49,   48,   43,   41,   39,   38,   24,   14,   11,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,

     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int parser6__flex_debug;
int parser6__flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[213] =
    {   0,
      147,  149,  151,  156,  157,  162,  163,  164,  176,  179,
      184,  191,  200,  209,  218,  227,  236,  245,  254,  263,
      272,  281,  290,  299,  308,  320,  332,  342,  352,  362,
      372,  382,  391,  401,  411,  421,  431,  440,  449,  458,
      467,  476,  485,  494,  503,  512,  521,  530,  539,  548,
      557,  570,  579,  588,  597,  606,  617,  628,  639,  650,
      662,  673,  684,  695,  706,  717,  728,  739,  750,  761,
      772,  783,  792,  803,  814,  825,  836,  847,  858,  869,
      880,  889,  898,  907,  916,  927,  938,  949,  960,  971,
      982,  993, 1005, 1015, 1026, 1035, 1044, 1059, 1075, 1084,

     1093, 1102, 1111, 1120, 1129, 1138, 1147, 1156, 1165, 1189,
     1213, 1222, 1232, 1242, 1251, 1261, 1272, 1281, 1290, 1299,
     1308, 1317, 1328, 1339, 1350, 1360, 1369, 1378, 1387, 1398,
     1409, 1420, 1431, 1442, 1451, 1460, 1469, 1478, 1487, 1496,
     1505, 1514, 1523, 1533, 1545, 1558, 1567, 1576, 1586, 1596,
     1605, 1616, 1626, 1635, 1645, 1655, 1664, 1673, 1682, 1691,
     1701, 1710, 1719, 1728, 1737, 1746, 1755, 1764, 1773, 1782,
     1791, 1800, 1809, 1818, 1827, 1836, 1845, 1854, 1863, 1872,
     1881, 1890, 1899, 1908, 1917, 1926, 1935, 1944, 1953, 1962,
     1971, 1980, 1989, 1998, 2099, 2115, 2164, 2172, 2187, 2188,

     2189, 2190, 2191, 2192, 2194, 2212, 2225, 2230, 2234, 2236,
     2238, 2240
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *parser6_text;
#line 1 "dhcp6_lexer.ll"
/* Copyright (C) 2016-2020 Internet Systems Consortium, Inc. ("ISC")

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/. */
#line 8 "dhcp6_lexer.ll"

/* Generated files do not make clang static analyser so happy */
#ifndef __clang_analyzer__

#include <cctype>
#include <cerrno>
#include <climits>
#include <cstdlib>
#include <string>
#include <dhcp6/parser_context.h>
#include <asiolink/io_address.h>
#include <boost/lexical_cast.hpp>
#include <exceptions/exceptions.h>

/* Please avoid C++ style comments (// ... eol) as they break flex 2.6.2 */

/* Work around an incompatibility in flex (at least versions
   2.5.31 through 2.5.33): it generates code that does
   not conform to C89.  See Debian bug 333231
   <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>. */
# undef parser6_wrap
# define parser6_wrap() 1

namespace {

bool start_token_flag = false;

isc::dhcp::Parser6Context::ParserType start_token_value;
unsigned int comment_start_line = 0;

using namespace isc::dhcp;

};

/* To avoid the call to exit... oops! */
#define YY_FATAL_ERROR(msg) isc::dhcp::Parser6Context::fatal(msg)
/* noyywrap disables automatic rewinding for the next file to parse. Since we
   always parse only a single string, there's no need to do any wraps. And
   using parser6_wrap requires linking with -lfl, which provides the default parser6_wrap
   implementation that always returns 1 anyway. */
/* nounput simplifies the lexer, by removing support for putting a character
   back into the input stream. We never use such capability anyway. */
/* batch means that we'll never use the generated lexer interactively. */
/* avoid to get static global variables to remain with C++. */
/* in last resort %option reentrant */
/* Enables debug mode. To see the debug messages, one needs to also set
   parser6__flex_debug to 1, then the debug messages will be printed on stderr. */
/* I have no idea what this option does, except it was specified in the bison
   examples and Postgres folks added it to remove gcc 4.3 warnings. Let's
   be on the safe side and keep it. */
#define YY_NO_INPUT 1


/* These are not token expressions yet, just convenience expressions that
   can be used during actual token definitions. Note some can match
   incorrect inputs (e.g., IP addresses) which must be checked. */
/* for errors */
#line 95 "dhcp6_lexer.ll"
/* This code run each time a pattern is matched. It updates the location
   by moving it ahead by parser6_leng bytes. parser6_leng specifies the length of the
   currently matched token. */
#define YY_USER_ACTION  driver.loc_.columns(parser6_leng);
#line 1830 "dhcp6_lexer.cc"

#define INITIAL 0
#define COMMENT 1
#define DIR_ENTER 2
#define DIR_INCLUDE 3
#define DIR_EXIT 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int parser6_lex_destroy (void );

int parser6_get_debug (void );

void parser6_set_debug (int debug_flag  );

YY_EXTRA_TYPE parser6_get_extra (void );

void parser6_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *parser6_get_in (void );

void parser6_set_in  (FILE * in_str  );

FILE *parser6_get_out (void );

void parser6_set_out  (FILE * out_str  );

yy_size_t parser6_get_leng (void );

char *parser6_get_text (void );

int parser6_get_lineno (void );

void parser6_set_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int parser6_wrap (void );
#else
extern int parser6_wrap (void );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( parser6_text, parser6_leng, 1, parser6_out )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( parser6_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( parser6_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, parser6_in))==0 && ferror(parser6_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(parser6_in); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int parser6_lex (void);

#define YY_DECL int parser6_lex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after parser6_text and parser6_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 101 "dhcp6_lexer.ll"



    /* This part of the code is copied over to the verbatim to the top
       of the generated parser6_lex function. Explanation:
       http://www.gnu.org/software/bison/manual/html_node/Multiple-start_002dsymbols.html */

    /* Code run each time parser6_lex is called. */
    driver.loc_.step();

    if (start_token_flag) {
        start_token_flag = false;
        switch (start_token_value) {
        case Parser6Context::PARSER_JSON:
        default:
            return isc::dhcp::Dhcp6Parser::make_TOPLEVEL_JSON(driver.loc_);
        case Parser6Context::PARSER_DHCP6:
            return isc::dhcp::Dhcp6Parser::make_TOPLEVEL_DHCP6(driver.loc_);
        case Parser6Context::SUBPARSER_DHCP6:
            return isc::dhcp::Dhcp6Parser::make_SUB_DHCP6(driver.loc_);
        case Parser6Context::PARSER_INTERFACES:
            return isc::dhcp::Dhcp6Parser::make_SUB_INTERFACES6(driver.loc_);
        case Parser6Context::PARSER_SUBNET6:
            return isc::dhcp::Dhcp6Parser::make_SUB_SUBNET6(driver.loc_);
        case Parser6Context::PARSER_POOL6:
            return isc::dhcp::Dhcp6Parser::make_SUB_POOL6(driver.loc_);
        case Parser6Context::PARSER_PD_POOL:
            return isc::dhcp::Dhcp6Parser::make_SUB_PD_POOL(driver.loc_);
        case Parser6Context::PARSER_HOST_RESERVATION:
            return isc::dhcp::Dhcp6Parser::make_SUB_RESERVATION(driver.loc_);
        case Parser6Context::PARSER_OPTION_DEFS:
            return isc::dhcp::Dhcp6Parser::make_SUB_OPTION_DEFS(driver.loc_);
        case Parser6Context::PARSER_OPTION_DEF:
            return isc::dhcp::Dhcp6Parser::make_SUB_OPTION_DEF(driver.loc_);
        case Parser6Context::PARSER_OPTION_DATA:
            return isc::dhcp::Dhcp6Parser::make_SUB_OPTION_DATA(driver.loc_);
        case Parser6Context::PARSER_HOOKS_LIBRARY:
            return isc::dhcp::Dhcp6Parser::make_SUB_HOOKS_LIBRARY(driver.loc_);
        case Parser6Context::PARSER_DHCP_DDNS:
            return isc::dhcp::Dhcp6Parser::make_SUB_DHCP_DDNS(driver.loc_);
        case Parser6Context::PARSER_CONFIG_CONTROL:
            return isc::dhcp::Dhcp6Parser::make_SUB_CONFIG_CONTROL(driver.loc_);
        }
    }


#line 2121 "dhcp6_lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! parser6_in )
/* %if-c-only */
			parser6_in = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! parser6_out )
/* %if-c-only */
			parser6_out = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			parser6_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				parser6__create_buffer(parser6_in,YY_BUF_SIZE );
		}

		parser6__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of parser6_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1953 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1952 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for parser6_lineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( parser6__flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 213 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], parser6_text );
			else if ( yy_act == 213 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         parser6_text );
			else if ( yy_act == 214 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 147 "dhcp6_lexer.ll"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 149 "dhcp6_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 151 "dhcp6_lexer.ll"
{
  BEGIN(COMMENT);
  comment_start_line = driver.loc_.end.line;;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 156 "dhcp6_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 157 "dhcp6_lexer.ll"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 158 "dhcp6_lexer.ll"
{
    isc_throw(Dhcp6ParseError, "Comment not closed. (/* in line " << comment_start_line);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 162 "dhcp6_lexer.ll"
BEGIN(DIR_ENTER);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 163 "dhcp6_lexer.ll"
BEGIN(DIR_INCLUDE);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 164 "dhcp6_lexer.ll"
{
    /* Include directive. */

    /* Extract the filename. */
    std::string tmp(parser6_text+1);
    tmp.resize(tmp.size() - 1);

    driver.includeFile(tmp);
}
	YY_BREAK
case YY_STATE_EOF(DIR_ENTER):
case YY_STATE_EOF(DIR_INCLUDE):
case YY_STATE_EOF(DIR_EXIT):
#line 173 "dhcp6_lexer.ll"
{
    isc_throw(Dhcp6ParseError, "Directive not closed.");
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 176 "dhcp6_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 179 "dhcp6_lexer.ll"
{
    /* Ok, we found a with space. Let's ignore it and update loc variable. */
    driver.loc_.step();
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 184 "dhcp6_lexer.ll"
{
    /* Newline found. Let's update the location and continue. */
    driver.loc_.lines(parser6_leng);
    driver.loc_.step();
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 191 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_ENABLE_UPDATES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("enable-updates", driver.loc_);
    }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 200 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_QUALIFYING_SUFFIX(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("qualifying-suffix", driver.loc_);
    }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 209 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_SERVER_IP(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("server-ip", driver.loc_);
    }
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 218 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_SERVER_PORT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("server-port", driver.loc_);
    }
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 227 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_SENDER_IP(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("sender-ip", driver.loc_);
    }
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 236 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_SENDER_PORT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("sender-port", driver.loc_);
    }
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 245 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_MAX_QUEUE_SIZE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("max-queue-size", driver.loc_);
    }
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 254 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_NCR_PROTOCOL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ncr-protocol", driver.loc_);
    }
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 263 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_NCR_FORMAT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ncr-format", driver.loc_);
    }
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 272 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_OVERRIDE_NO_UPDATE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("override-no-update", driver.loc_);
    }
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 281 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_OVERRIDE_CLIENT_UPDATE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("override-client-update", driver.loc_);
    }
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 290 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_REPLACE_CLIENT_NAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("replace-client-name", driver.loc_);
    }
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 299 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_GENERATED_PREFIX(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("generated-prefix", driver.loc_);
    }
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 308 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::DHCP_DDNS:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_HOSTNAME_CHAR_SET(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("hostname-char-set", driver.loc_);
    }
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 320 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::DHCP_DDNS:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_HOSTNAME_CHAR_REPLACEMENT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("hostname-char-replacement", driver.loc_);
    }
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 332 "dhcp6_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser6Context::NCR_PROTOCOL) {
        return isc::dhcp::Dhcp6Parser::make_UDP(driver.loc_);
    }
    std::string tmp(parser6_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp6Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 342 "dhcp6_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser6Context::NCR_PROTOCOL) {
        return isc::dhcp::Dhcp6Parser::make_TCP(driver.loc_);
    }
    std::string tmp(parser6_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp6Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 352 "dhcp6_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser6Context::NCR_FORMAT) {
        return isc::dhcp::Dhcp6Parser::make_JSON(driver.loc_);
    }
    std::string tmp(parser6_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp6Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 362 "dhcp6_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser6Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp6Parser::make_WHEN_PRESENT(driver.loc_);
    }
    std::string tmp(parser6_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp6Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 372 "dhcp6_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser6Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp6Parser::make_WHEN_PRESENT(driver.loc_);
    }
    std::string tmp(parser6_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp6Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 382 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::REPLACE_CLIENT_NAME:
        return isc::dhcp::Dhcp6Parser::make_NEVER(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("never", driver.loc_);
    }
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 391 "dhcp6_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser6Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp6Parser::make_NEVER(driver.loc_);
    }
    std::string tmp(parser6_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp6Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 401 "dhcp6_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser6Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp6Parser::make_NEVER(driver.loc_);
    }
    std::string tmp(parser6_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp6Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 411 "dhcp6_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser6Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp6Parser::make_ALWAYS(driver.loc_);
    }
    std::string tmp(parser6_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp6Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 421 "dhcp6_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser6Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp6Parser::make_WHEN_NOT_PRESENT(driver.loc_);
    }
    std::string tmp(parser6_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp6Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 431 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::CONFIG:
        return isc::dhcp::Dhcp6Parser::make_DHCP6(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("Dhcp6", driver.loc_);
    }
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 440 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return  isc::dhcp::Dhcp6Parser::make_DATA_DIRECTORY(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("data-directory", driver.loc_);
    }
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 449 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return  isc::dhcp::Dhcp6Parser::make_INTERFACES_CONFIG(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("interfaces-config", driver.loc_);
    }
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 458 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::INTERFACES_CONFIG:
        return  isc::dhcp::Dhcp6Parser::make_INTERFACES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("interfaces", driver.loc_);
    }
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 467 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::INTERFACES_CONFIG:
        return  isc::dhcp::Dhcp6Parser::make_RE_DETECT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("re-detect", driver.loc_);
    }
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 476 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return  isc::dhcp::Dhcp6Parser::make_SANITY_CHECKS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("sanity-checks", driver.loc_);
    }
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 485 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SANITY_CHECKS:
        return  isc::dhcp::Dhcp6Parser::make_LEASE_CHECKS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("lease-checks", driver.loc_);
    }
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 494 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_LEASE_DATABASE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("lease-database", driver.loc_);
    }
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 503 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_HOSTS_DATABASE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("hosts-database", driver.loc_);
    }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 512 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_HOSTS_DATABASES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("hosts-databases", driver.loc_);
    }
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 521 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_CONFIG_CONTROL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("config-control", driver.loc_);
    }
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 530 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::CONFIG_CONTROL:
        return isc::dhcp::Dhcp6Parser::make_CONFIG_DATABASES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("config-databases", driver.loc_);
    }
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 539 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::CONFIG_CONTROL:
        return isc::dhcp::Dhcp6Parser::make_CONFIG_FETCH_WAIT_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("config-fetch-wait-time", driver.loc_);
    }
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 548 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_READONLY(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("readonly", driver.loc_);
    }
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 557 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::OPTION_DEF:
    case isc::dhcp::Parser6Context::SERVER_ID:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_TYPE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("type", driver.loc_);
    }
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 570 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DATABASE_TYPE:
        return isc::dhcp::Dhcp6Parser::make_MEMFILE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("memfile", driver.loc_);
    }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 579 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DATABASE_TYPE:
        return isc::dhcp::Dhcp6Parser::make_MYSQL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("mysql", driver.loc_);
    }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 588 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DATABASE_TYPE:
        return isc::dhcp::Dhcp6Parser::make_POSTGRESQL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("postgresql", driver.loc_);
    }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 597 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DATABASE_TYPE:
        return isc::dhcp::Dhcp6Parser::make_CQL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("cql", driver.loc_);
    }
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 606 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_USER(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("user", driver.loc_);
    }
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 617 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_PASSWORD(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("password", driver.loc_);
    }
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 628 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_HOST(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("host", driver.loc_);
    }
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 639 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_PORT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("port", driver.loc_);
    }
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 650 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::SERVER_ID:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_PERSIST(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("persist", driver.loc_);
    }
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 662 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_LFC_INTERVAL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("lfc-interval", driver.loc_);
    }
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 673 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_CONNECT_TIMEOUT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("connect-timeout", driver.loc_);
    }
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 684 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_KEYSPACE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("keyspace", driver.loc_);
    }
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 695 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_CONSISTENCY(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("consistency", driver.loc_);
    }
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 706 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_SERIAL_CONSISTENCY(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("serial-consistency", driver.loc_);
    }
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 717 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_RECONNECT_WAIT_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("reconnect-wait-time", driver.loc_);
    }
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 728 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_REQUEST_TIMEOUT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("request-timeout", driver.loc_);
    }
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 739 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_TCP_KEEPALIVE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("tcp-keepalive", driver.loc_);
    }
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 750 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_TCP_NODELAY(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("tcp-nodelay", driver.loc_);
    }
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 761 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_CONTACT_POINTS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("contact-points", driver.loc_);
    }
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 772 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_MAX_RECONNECT_TRIES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("max-reconnect-tries", driver.loc_);
    }
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 783 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_MAX_ROW_ERRORS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("max_row_errors", driver.loc_);
    }
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 792 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_PREFERRED_LIFETIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("preferred-lifetime", driver.loc_);
    }
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 803 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_MIN_PREFERRED_LIFETIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("min-preferred-lifetime", driver.loc_);
    }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 814 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_MAX_PREFERRED_LIFETIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("max-preferred-lifetime", driver.loc_);
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 825 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_VALID_LIFETIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("valid-lifetime", driver.loc_);
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 836 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_MIN_VALID_LIFETIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("min-valid-lifetime", driver.loc_);
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 847 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_MAX_VALID_LIFETIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("max-valid-lifetime", driver.loc_);
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 858 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_RENEW_TIMER(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("renew-timer", driver.loc_);
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 869 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_REBIND_TIMER(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("rebind-timer", driver.loc_);
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 880 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_DECLINE_PROBATION_PERIOD(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("decline-probation-period", driver.loc_);
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 889 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_SERVER_TAG(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("server-tag", driver.loc_);
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 898 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_STATISTIC_DEFAULT_SAMPLE_COUNT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("statistic-default-sample-count", driver.loc_);
    }
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 907 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_STATISTIC_DEFAULT_SAMPLE_AGE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("statistic-default-sample-age", driver.loc_);
    }
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 916 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_DDNS_SEND_UPDATES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ddns-send-updates", driver.loc_);
    }
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 927 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_DDNS_OVERRIDE_NO_UPDATE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ddns-override-no-update", driver.loc_);
    }
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 938 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_DDNS_OVERRIDE_CLIENT_UPDATE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ddns-override-client-update", driver.loc_);
    }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 949 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_DDNS_REPLACE_CLIENT_NAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ddns-replace-client-name", driver.loc_);
    }
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 960 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_DDNS_GENERATED_PREFIX(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ddns-generated-prefix", driver.loc_);
    }
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 971 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_DDNS_QUALIFYING_SUFFIX(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ddns-qualifying-suffix", driver.loc_);
    }
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 982 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_DDNS_UPDATE_ON_RENEW(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ddns-update-on-renew", driver.loc_);
    }
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 993 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_DDNS_USE_CONFLICT_RESOLUTION(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ddns-use-conflict-resolution", driver.loc_);
    }
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1005 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_SUBNET6(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("subnet6", driver.loc_);
    }
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1015 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_STORE_EXTENDED_INFO(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("store-extended-info", driver.loc_);
    }
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1026 "dhcp6_lexer.ll"
{
    switch (driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return Dhcp6Parser::make_SHARED_NETWORKS(driver.loc_);
    default:
        return Dhcp6Parser::make_STRING("shared-networks", driver.loc_);
    }
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1035 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_OPTION_DEF(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("option-def", driver.loc_);
    }
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1044 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::POOLS:
    case isc::dhcp::Parser6Context::PD_POOLS:
    case isc::dhcp::Parser6Context::RESERVATIONS:
    case isc::dhcp::Parser6Context::CLIENT_CLASSES:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_OPTION_DATA(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("option-data", driver.loc_);
    }
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1059 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LEASE_DATABASE:
    case isc::dhcp::Parser6Context::HOSTS_DATABASE:
    case isc::dhcp::Parser6Context::OPTION_DEF:
    case isc::dhcp::Parser6Context::OPTION_DATA:
    case isc::dhcp::Parser6Context::CLIENT_CLASSES:
    case isc::dhcp::Parser6Context::LOGGERS:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
    case isc::dhcp::Parser6Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp6Parser::make_NAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("name", driver.loc_);
    }
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1075 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OPTION_DATA:
        return isc::dhcp::Dhcp6Parser::make_DATA(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("data", driver.loc_);
    }
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1084 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OPTION_DATA:
        return isc::dhcp::Dhcp6Parser::make_ALWAYS_SEND(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("always-send", driver.loc_);
    }
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1093 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SUBNET6:
        return isc::dhcp::Dhcp6Parser::make_POOLS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("pools", driver.loc_);
    }
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1102 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SUBNET6:
        return isc::dhcp::Dhcp6Parser::make_PD_POOLS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("pd-pools", driver.loc_);
    }
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1111 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::PD_POOLS:
        return isc::dhcp::Dhcp6Parser::make_PREFIX(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("prefix", driver.loc_);
    }
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1120 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::PD_POOLS:
        return isc::dhcp::Dhcp6Parser::make_PREFIX_LEN(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("prefix-len", driver.loc_);
    }
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1129 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::PD_POOLS:
        return isc::dhcp::Dhcp6Parser::make_EXCLUDED_PREFIX(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("excluded-prefix", driver.loc_);
    }
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1138 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::PD_POOLS:
        return isc::dhcp::Dhcp6Parser::make_EXCLUDED_PREFIX_LEN(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("excluded-prefix-len", driver.loc_);
    }
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1147 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::PD_POOLS:
        return isc::dhcp::Dhcp6Parser::make_DELEGATED_LEN(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("delegated-len", driver.loc_);
    }
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1156 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::POOLS:
        return isc::dhcp::Dhcp6Parser::make_POOL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("pool", driver.loc_);
    }
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1165 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::INTERFACES_CONFIG:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::POOLS:
    case isc::dhcp::Parser6Context::PD_POOLS:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
    case isc::dhcp::Parser6Context::OPTION_DEF:
    case isc::dhcp::Parser6Context::OPTION_DATA:
    case isc::dhcp::Parser6Context::RESERVATIONS:
    case isc::dhcp::Parser6Context::CLIENT_CLASSES:
    case isc::dhcp::Parser6Context::SERVER_ID:
    case isc::dhcp::Parser6Context::CONTROL_SOCKET:
    case isc::dhcp::Parser6Context::DHCP_QUEUE_CONTROL:
    case isc::dhcp::Parser6Context::DHCP_MULTI_THREADING:
    case isc::dhcp::Parser6Context::LOGGERS:
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_USER_CONTEXT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("user-context", driver.loc_);
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1189 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::INTERFACES_CONFIG:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::POOLS:
    case isc::dhcp::Parser6Context::PD_POOLS:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
    case isc::dhcp::Parser6Context::OPTION_DEF:
    case isc::dhcp::Parser6Context::OPTION_DATA:
    case isc::dhcp::Parser6Context::RESERVATIONS:
    case isc::dhcp::Parser6Context::CLIENT_CLASSES:
    case isc::dhcp::Parser6Context::SERVER_ID:
    case isc::dhcp::Parser6Context::CONTROL_SOCKET:
    case isc::dhcp::Parser6Context::DHCP_QUEUE_CONTROL:
    case isc::dhcp::Parser6Context::DHCP_MULTI_THREADING:
    case isc::dhcp::Parser6Context::LOGGERS:
    case isc::dhcp::Parser6Context::DHCP_DDNS:
        return isc::dhcp::Dhcp6Parser::make_COMMENT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("comment", driver.loc_);
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1213 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SUBNET6:
        return isc::dhcp::Dhcp6Parser::make_SUBNET(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("subnet", driver.loc_);
    }
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1222 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_INTERFACE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("interface", driver.loc_);
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1232 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_INTERFACE_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("interface-id", driver.loc_);
    }
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1242 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SUBNET6:
        return isc::dhcp::Dhcp6Parser::make_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("id", driver.loc_);
    }
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1251 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_RAPID_COMMIT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("rapid-commit", driver.loc_);
    }
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1261 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_RESERVATION_MODE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("reservation-mode", driver.loc_);
    }
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1272 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::RESERVATION_MODE:
        return isc::dhcp::Dhcp6Parser::make_DISABLED(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("disabled", driver.loc_);
    }
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1281 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::RESERVATION_MODE:
        return isc::dhcp::Dhcp6Parser::make_DISABLED(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("off", driver.loc_);
    }
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1290 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::RESERVATION_MODE:
        return isc::dhcp::Dhcp6Parser::make_OUT_OF_POOL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("out-of-pool", driver.loc_);
    }
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1299 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::RESERVATION_MODE:
        return isc::dhcp::Dhcp6Parser::make_GLOBAL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("global", driver.loc_);
    }
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1308 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::RESERVATION_MODE:
        return isc::dhcp::Dhcp6Parser::make_ALL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("all", driver.loc_);
    }
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1317 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_RESERVATIONS_GLOBAL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("reservations-global", driver.loc_);
    }
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1328 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_RESERVATIONS_IN_SUBNET(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("reservations-in-subnet", driver.loc_);
    }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1339 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_RESERVATIONS_OUT_OF_POOL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("reservations-out-of-pool", driver.loc_);
    }
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1350 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OPTION_DEF:
    case isc::dhcp::Parser6Context::OPTION_DATA:
        return isc::dhcp::Dhcp6Parser::make_CODE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("code", driver.loc_);
    }
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1360 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_MAC_SOURCES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("mac-sources", driver.loc_);
    }
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1369 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_RELAY_SUPPLIED_OPTIONS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("relay-supplied-options", driver.loc_);
    }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1378 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_HOST_RESERVATION_IDENTIFIERS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("host-reservation-identifiers", driver.loc_);
    }
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1387 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_CALCULATE_TEE_TIMES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("calculate-tee-times", driver.loc_);
    }
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1398 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_T1_PERCENT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("t1-percent", driver.loc_);
    }
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1409 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_T2_PERCENT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("t2-percent", driver.loc_);
    }
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1420 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_CACHE_THRESHOLD(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("cache-threshold", driver.loc_);
    }
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1431 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_CACHE_MAX_AGE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("cache-max-age", driver.loc_);
    }
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1442 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_LOGGERS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("loggers", driver.loc_);
    }
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1451 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LOGGERS:
        return isc::dhcp::Dhcp6Parser::make_OUTPUT_OPTIONS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("output_options", driver.loc_);
    }
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1460 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OUTPUT_OPTIONS:
        return isc::dhcp::Dhcp6Parser::make_OUTPUT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("output", driver.loc_);
    }
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1469 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OUTPUT_OPTIONS:
        return isc::dhcp::Dhcp6Parser::make_FLUSH(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("flush", driver.loc_);
    }
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1478 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OUTPUT_OPTIONS:
        return isc::dhcp::Dhcp6Parser::make_MAXSIZE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("maxsize", driver.loc_);
    }
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1487 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OUTPUT_OPTIONS:
        return isc::dhcp::Dhcp6Parser::make_MAXVER(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("maxver", driver.loc_);
    }
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1496 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OUTPUT_OPTIONS:
        return isc::dhcp::Dhcp6Parser::make_PATTERN(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("pattern", driver.loc_);
    }
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1505 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LOGGERS:
        return isc::dhcp::Dhcp6Parser::make_DEBUGLEVEL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("debuglevel", driver.loc_);
    }
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1514 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::LOGGERS:
        return isc::dhcp::Dhcp6Parser::make_SEVERITY(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("severity", driver.loc_);
    }
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1523 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::RESERVATIONS:
        return isc::dhcp::Dhcp6Parser::make_CLIENT_CLASSES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("client-classes", driver.loc_);
    }
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1533 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::POOLS:
    case isc::dhcp::Parser6Context::PD_POOLS:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_REQUIRE_CLIENT_CLASSES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("require-client-classes", driver.loc_);
    }
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1545 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::POOLS:
    case isc::dhcp::Parser6Context::PD_POOLS:
    case isc::dhcp::Parser6Context::CLIENT_CLASSES:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_CLIENT_CLASS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("client-class", driver.loc_);
    }
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1558 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::CLIENT_CLASSES:
        return isc::dhcp::Dhcp6Parser::make_TEST(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("test", driver.loc_);
    }
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1567 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::CLIENT_CLASSES:
        return isc::dhcp::Dhcp6Parser::make_ONLY_IF_REQUIRED(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("only-if-required", driver.loc_);
    }
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1576 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
    case isc::dhcp::Parser6Context::SUBNET6:
        return isc::dhcp::Dhcp6Parser::make_RESERVATIONS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("reservations", driver.loc_);
    }
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1586 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::RESERVATIONS:
    case isc::dhcp::Parser6Context::RELAY:
        return isc::dhcp::Dhcp6Parser::make_IP_ADDRESSES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ip-addresses", driver.loc_);
    }
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1596 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::RESERVATIONS:
        return isc::dhcp::Dhcp6Parser::make_PREFIXES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("prefixes", driver.loc_);
    }
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1605 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::MAC_SOURCES:
    case isc::dhcp::Parser6Context::HOST_RESERVATION_IDENTIFIERS:
    case isc::dhcp::Parser6Context::RESERVATIONS:
        return isc::dhcp::Dhcp6Parser::make_DUID(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("duid", driver.loc_);
    }
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1616 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::HOST_RESERVATION_IDENTIFIERS:
    case isc::dhcp::Parser6Context::RESERVATIONS:
        return isc::dhcp::Dhcp6Parser::make_HW_ADDRESS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("hw-address", driver.loc_);
    }
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1626 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::RESERVATIONS:
        return isc::dhcp::Dhcp6Parser::make_HOSTNAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("hostname", driver.loc_);
    }
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1635 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::HOST_RESERVATION_IDENTIFIERS:
    case isc::dhcp::Parser6Context::RESERVATIONS:
        return isc::dhcp::Dhcp6Parser::make_FLEX_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("flex-id", driver.loc_);
    }
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1645 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OPTION_DEF:
    case isc::dhcp::Parser6Context::OPTION_DATA:
        return isc::dhcp::Dhcp6Parser::make_SPACE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("space", driver.loc_);
    }
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1655 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OPTION_DATA:
        return isc::dhcp::Dhcp6Parser::make_CSV_FORMAT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("csv-format", driver.loc_);
    }
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1664 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OPTION_DEF:
        return isc::dhcp::Dhcp6Parser::make_RECORD_TYPES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("record-types", driver.loc_);
    }
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1673 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OPTION_DEF:
        return isc::dhcp::Dhcp6Parser::make_ENCAPSULATE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("encapsulate", driver.loc_);
    }
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1682 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::OPTION_DEF:
        return isc::dhcp::Dhcp6Parser::make_ARRAY(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("array", driver.loc_);
    }
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1691 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SUBNET6:
    case isc::dhcp::Parser6Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp6Parser::make_RELAY(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("relay", driver.loc_);
    }
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1701 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::RELAY:
        return isc::dhcp::Dhcp6Parser::make_IP_ADDRESS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ip-address", driver.loc_);
    }
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1710 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_HOOKS_LIBRARIES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("hooks-libraries", driver.loc_);
    }
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1719 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::HOOKS_LIBRARIES:
        return isc::dhcp::Dhcp6Parser::make_PARAMETERS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("parameters", driver.loc_);
    }
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1728 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::HOOKS_LIBRARIES:
        return isc::dhcp::Dhcp6Parser::make_LIBRARY(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("library", driver.loc_);
    }
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1737 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_SERVER_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("server-id", driver.loc_);
    }
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1746 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DUID_TYPE:
        return isc::dhcp::Dhcp6Parser::make_LLT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("LLT", driver.loc_);
    }
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1755 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DUID_TYPE:
        return isc::dhcp::Dhcp6Parser::make_EN(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("EN", driver.loc_);
    }
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1764 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DUID_TYPE:
        return isc::dhcp::Dhcp6Parser::make_LL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("LL", driver.loc_);
    }
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1773 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SERVER_ID:
        return isc::dhcp::Dhcp6Parser::make_IDENTIFIER(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("identifier", driver.loc_);
    }
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1782 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SERVER_ID:
        return isc::dhcp::Dhcp6Parser::make_HTYPE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("htype", driver.loc_);
    }
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1791 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SERVER_ID:
        return isc::dhcp::Dhcp6Parser::make_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("time", driver.loc_);
    }
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1800 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::SERVER_ID:
        return isc::dhcp::Dhcp6Parser::make_ENTERPRISE_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("enterprise-id", driver.loc_);
    }
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1809 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_EXPIRED_LEASES_PROCESSING(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("expired-leases-processing", driver.loc_);
    }
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1818 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp6Parser::make_RECLAIM_TIMER_WAIT_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("reclaim-timer-wait-time", driver.loc_);
    }
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1827 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp6Parser::make_FLUSH_RECLAIMED_TIMER_WAIT_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("flush-reclaimed-timer-wait-time", driver.loc_);
    }
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1836 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp6Parser::make_HOLD_RECLAIMED_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("hold-reclaimed-time", driver.loc_);
    }
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1845 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp6Parser::make_MAX_RECLAIM_LEASES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("max-reclaim-leases", driver.loc_);
    }
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1854 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp6Parser::make_MAX_RECLAIM_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("max-reclaim-time", driver.loc_);
    }
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1863 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp6Parser::make_UNWARNED_RECLAIM_CYCLES(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("unwarned-reclaim-cycles", driver.loc_);
    }
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1872 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_DHCP4O6_PORT(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("dhcp4o6-port", driver.loc_);
    }
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1881 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_DHCP_MULTI_THREADING(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("multi-threading", driver.loc_);
    }
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1890 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_MULTI_THREADING:
        return isc::dhcp::Dhcp6Parser::make_ENABLE_MULTI_THREADING(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("enable-multi-threading", driver.loc_);
    }
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1899 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_MULTI_THREADING:
        return isc::dhcp::Dhcp6Parser::make_THREAD_POOL_SIZE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("thread-pool-size", driver.loc_);
    }
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1908 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_MULTI_THREADING:
        return isc::dhcp::Dhcp6Parser::make_PACKET_QUEUE_SIZE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("packet-queue-size", driver.loc_);
    }
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1917 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_CONTROL_SOCKET(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("control-socket", driver.loc_);
    }
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 1926 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::CONTROL_SOCKET:
        return isc::dhcp::Dhcp6Parser::make_SOCKET_TYPE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("socket-type", driver.loc_);
    }
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1935 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::CONTROL_SOCKET:
        return isc::dhcp::Dhcp6Parser::make_SOCKET_NAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("socket-name", driver.loc_);
    }
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1944 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_DHCP_QUEUE_CONTROL(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("dhcp-queue-control", driver.loc_);
    }
}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 1953 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_QUEUE_CONTROL:
        return isc::dhcp::Dhcp6Parser::make_ENABLE_QUEUE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("enable-queue", driver.loc_);
    }
}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1962 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_QUEUE_CONTROL:
        return isc::dhcp::Dhcp6Parser::make_QUEUE_TYPE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("queue-type", driver.loc_);
    }
}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1971 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP_QUEUE_CONTROL:
        return isc::dhcp::Dhcp6Parser::make_CAPACITY(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("capacity", driver.loc_);
    }
}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 1980 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_DHCP_DDNS(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("dhcp-ddns", driver.loc_);
    }
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1989 "dhcp6_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser6Context::DHCP6:
        return isc::dhcp::Dhcp6Parser::make_IP_RESERVATIONS_UNIQUE(driver.loc_);
    default:
        return isc::dhcp::Dhcp6Parser::make_STRING("ip-reservations-unique", driver.loc_);
    }
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1998 "dhcp6_lexer.ll"
{
    /* A string has been matched. It contains the actual string and single quotes.
       We need to get those quotes out of the way and just use its content, e.g.
       for 'foo' we should get foo */
    std::string raw(parser6_text+1);
    size_t len = raw.size() - 1;
    raw.resize(len);
    std::string decoded;
    decoded.reserve(len);
    for (size_t pos = 0; pos < len; ++pos) {
        int b = 0;
        char c = raw[pos];
        switch (c) {
        case '"':
            /* impossible condition */
            driver.error(driver.loc_, "Bad quote in \"" + raw + "\"");
            break;
        case '\\':
            ++pos;
            if (pos >= len) {
                /* impossible condition */
                driver.error(driver.loc_, "Overflow escape in \"" + raw + "\"");
            }
            c = raw[pos];
            switch (c) {
            case '"':
            case '\\':
            case '/':
                decoded.push_back(c);
                break;
            case 'b':
                decoded.push_back('\b');
                break;
            case 'f':
                decoded.push_back('\f');
                break;
            case 'n':
                decoded.push_back('\n');
                break;
            case 'r':
                decoded.push_back('\r');
                break;
            case 't':
                decoded.push_back('\t');
                break;
            case 'u':
                /* support only \u0000 to \u00ff */
                ++pos;
                if (pos + 4 > len) {
                    /* impossible condition */
                    driver.error(driver.loc_,
                                 "Overflow unicode escape in \"" + raw + "\"");
                }
                if ((raw[pos] != '0') || (raw[pos + 1] != '0')) {
                    driver.error(driver.loc_,
                    "Unsupported unicode escape in \"" + raw + "\"",
                    pos + 1);
                }
                pos += 2;
                c = raw[pos];
                if ((c >= '0') && (c <= '9')) {
                    b = (c - '0') << 4;
                } else if ((c >= 'A') && (c <= 'F')) {
                    b = (c - 'A' + 10) << 4;
                } else if ((c >= 'a') && (c <= 'f')) {
                    b = (c - 'a' + 10) << 4;
                } else {
                    /* impossible condition */
                    driver.error(driver.loc_, "Not hexadecimal in unicode escape in \"" + raw + "\"");
                }
                pos++;
                c = raw[pos];
                if ((c >= '0') && (c <= '9')) {
                    b |= c - '0';
                } else if ((c >= 'A') && (c <= 'F')) {
                    b |= c - 'A' + 10;
                } else if ((c >= 'a') && (c <= 'f')) {
                    b |= c - 'a' + 10;
                } else {
                    /* impossible condition */
                    driver.error(driver.loc_, "Not hexadecimal in unicode escape in \"" + raw + "\"");
                }
                decoded.push_back(static_cast<char>(b & 0xff));
                break;
            default:
                /* impossible condition */
                driver.error(driver.loc_, "Bad escape in \"" + raw + "\"");
            }
            break;
        default:
            if ((c >= 0) && (c < 0x20)) {
                /* impossible condition */
                driver.error(driver.loc_, "Invalid control in \"" + raw + "\"");
            }
            decoded.push_back(c);
        }
    }

    return isc::dhcp::Dhcp6Parser::make_STRING(decoded, driver.loc_);
}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 2099 "dhcp6_lexer.ll"
{
    /* Bad string with a forbidden control character inside */
    std::string raw(parser6_text+1);
    size_t len = raw.size() - 1;
    size_t pos = 0;
    for (; pos < len; ++pos) {
        char c = raw[pos];
        if ((c >= 0) && (c < 0x20)) {
            break;
        }
    }
    driver.error(driver.loc_,
                 "Invalid control in " + std::string(parser6_text),
                 pos + 1);
}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 2115 "dhcp6_lexer.ll"
{
    /* Bad string with a bad escape inside */
    std::string raw(parser6_text+1);
    size_t len = raw.size() - 1;
    size_t pos = 0;
    bool found = false;
    for (; pos < len; ++pos) {
        if (found) {
            break;
        }
        char c = raw[pos];
        if (c == '\\') {
            ++pos;
            c = raw[pos];
            switch (c) {
            case '"':
            case '\\':
            case '/':
            case 'b':
            case 'f':
            case 'n':
            case 'r':
            case 't':
                break;
            case 'u':
                if ((pos + 4 > len) ||
                    !std::isxdigit(raw[pos + 1]) ||
                    !std::isxdigit(raw[pos + 2]) ||
                    !std::isxdigit(raw[pos + 3]) ||
                    !std::isxdigit(raw[pos + 4])) {
                    found = true;
                }
                break;
            default:
                found = true;
                break;
            }
        }
    }
    /* The rule stops on the first " including on \" so add ... in this case */
    std::string trailer = "";
    if (raw[len - 1] == '\\') {
        trailer = "...";
    }
    driver.error(driver.loc_,
                 "Bad escape in " + std::string(parser6_text) + trailer,
                 pos);
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2164 "dhcp6_lexer.ll"
{
    /* Bad string with an open escape at the end */
    std::string raw(parser6_text+1);
    driver.error(driver.loc_,
                 "Overflow escape in " + std::string(parser6_text),
                 raw.size() + 1);
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2172 "dhcp6_lexer.ll"
{
    /* Bad string with an open unicode escape at the end */
    std::string raw(parser6_text+1);
    size_t pos = raw.size() - 1;
    for (; pos > 0; --pos) {
        char c = raw[pos];
        if (c == 'u') {
            break;
        }
    }
    driver.error(driver.loc_,
                 "Overflow unicode escape in " + std::string(parser6_text),
                 pos + 1);
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 2187 "dhcp6_lexer.ll"
{ return isc::dhcp::Dhcp6Parser::make_LSQUARE_BRACKET(driver.loc_); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 2188 "dhcp6_lexer.ll"
{ return isc::dhcp::Dhcp6Parser::make_RSQUARE_BRACKET(driver.loc_); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2189 "dhcp6_lexer.ll"
{ return isc::dhcp::Dhcp6Parser::make_LCURLY_BRACKET(driver.loc_); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2190 "dhcp6_lexer.ll"
{ return isc::dhcp::Dhcp6Parser::make_RCURLY_BRACKET(driver.loc_); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 2191 "dhcp6_lexer.ll"
{ return isc::dhcp::Dhcp6Parser::make_COMMA(driver.loc_); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2192 "dhcp6_lexer.ll"
{ return isc::dhcp::Dhcp6Parser::make_COLON(driver.loc_); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2194 "dhcp6_lexer.ll"
{
    /* An integer was found. */
    std::string tmp(parser6_text);
    int64_t integer = 0;
    try {
        /* In substring we want to use negative values (e.g. -1).
           In enterprise-id we need to use values up to 0xffffffff.
           To cover both of those use cases, we need at least
           int64_t. */
        integer = boost::lexical_cast<int64_t>(tmp);
    } catch (const boost::bad_lexical_cast &) {
        driver.error(driver.loc_, "Failed to convert " + tmp + " to an integer.");
    }

    /* The parser needs the string form as double conversion is no lossless */
    return isc::dhcp::Dhcp6Parser::make_INTEGER(integer, driver.loc_);
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 2212 "dhcp6_lexer.ll"
{
    /* A floating point was found. */
    std::string tmp(parser6_text);
    double fp = 0.0;
    try {
        fp = boost::lexical_cast<double>(tmp);
    } catch (const boost::bad_lexical_cast &) {
        driver.error(driver.loc_, "Failed to convert " + tmp + " to a floating point.");
    }

    return isc::dhcp::Dhcp6Parser::make_FLOAT(fp, driver.loc_);
}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 2225 "dhcp6_lexer.ll"
{
    string tmp(parser6_text);
    return isc::dhcp::Dhcp6Parser::make_BOOLEAN(tmp == "true", driver.loc_);
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 2230 "dhcp6_lexer.ll"
{
   return isc::dhcp::Dhcp6Parser::make_NULL_TYPE(driver.loc_);
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 2234 "dhcp6_lexer.ll"
driver.error (driver.loc_, "JSON true reserved keyword is lower case only");
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 2236 "dhcp6_lexer.ll"
driver.error (driver.loc_, "JSON false reserved keyword is lower case only");
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 2238 "dhcp6_lexer.ll"
driver.error (driver.loc_, "JSON null reserved keyword is lower case only");
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 2240 "dhcp6_lexer.ll"
driver.error (driver.loc_, "Invalid character: " + std::string(parser6_text));
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 2242 "dhcp6_lexer.ll"
{
    if (driver.states_.empty()) {
        return isc::dhcp::Dhcp6Parser::make_END(driver.loc_);
    }
    driver.loc_ = driver.locs_.back();
    driver.locs_.pop_back();
    driver.file_ = driver.files_.back();
    driver.files_.pop_back();
    if (driver.sfile_) {
        fclose(driver.sfile_);
        driver.sfile_ = 0;
    }
    if (!driver.sfiles_.empty()) {
        driver.sfile_ = driver.sfiles_.back();
        driver.sfiles_.pop_back();
    }
    parser6__delete_buffer(YY_CURRENT_BUFFER);
    parser6__switch_to_buffer(driver.states_.back());
    driver.states_.pop_back();

    BEGIN(DIR_EXIT);
}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 2265 "dhcp6_lexer.ll"
ECHO;
	YY_BREAK
#line 5009 "dhcp6_lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed parser6_in at a new source and called
			 * parser6_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = parser6_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( parser6_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * parser6_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of parser6_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					parser6_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			parser6_restart(parser6_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) parser6_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1953 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1953 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1952);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					parser6_restart(parser6_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( parser6_wrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve parser6_text */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and parser6_lineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void parser6_restart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        parser6_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            parser6__create_buffer(parser6_in,YY_BUF_SIZE );
	}

	parser6__init_buffer(YY_CURRENT_BUFFER,input_file );
	parser6__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void parser6__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		parser6_pop_buffer_state();
	 *		parser6_push_buffer_state(new_buffer);
     */
	parser6_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	parser6__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (parser6_wrap()) processing, but the only time this flag
	 * is looked at is after parser6_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void parser6__load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	parser6_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE parser6__create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) parser6_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in parser6__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) parser6_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in parser6__create_buffer()" );

	b->yy_is_our_buffer = 1;

	parser6__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with parser6__create_buffer()
 * 
 */
/* %if-c-only */
    void parser6__delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		parser6_free((void *) b->yy_ch_buf  );

	parser6_free((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a parser6_restart() or at EOF.
 */
/* %if-c-only */
    static void parser6__init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	parser6__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then parser6__init_buffer was _probably_
     * called from parser6_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void parser6__flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		parser6__load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void parser6_push_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	parser6_ensure_buffer_stack();

	/* This block is copied from parser6__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from parser6__switch_to_buffer. */
	parser6__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void parser6_pop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	parser6__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		parser6__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void parser6_ensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)parser6_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in parser6_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)parser6_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in parser6_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE parser6__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) parser6_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in parser6__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	parser6__switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to parser6_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       parser6__scan_bytes() instead.
 */
YY_BUFFER_STATE parser6__scan_string (yyconst char * yystr )
{
    
	return parser6__scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to parser6_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE parser6__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) parser6_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in parser6__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = parser6__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in parser6__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up parser6_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		parser6_text[parser6_leng] = (yy_hold_char); \
		(yy_c_buf_p) = parser6_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		parser6_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int parser6_get_lineno  (void)
{
        
    return parser6_lineno;
}

/** Get the input stream.
 * 
 */
FILE *parser6_get_in  (void)
{
        return parser6_in;
}

/** Get the output stream.
 * 
 */
FILE *parser6_get_out  (void)
{
        return parser6_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t parser6_get_leng  (void)
{
        return parser6_leng;
}

/** Get the current token.
 * 
 */

char *parser6_get_text  (void)
{
        return parser6_text;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void parser6_set_lineno (int  line_number )
{
    
    parser6_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see parser6__switch_to_buffer
 */
void parser6_set_in (FILE *  in_str )
{
        parser6_in = in_str ;
}

void parser6_set_out (FILE *  out_str )
{
        parser6_out = out_str ;
}

int parser6_get_debug  (void)
{
        return parser6__flex_debug;
}

void parser6_set_debug (int  bdebug )
{
        parser6__flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from parser6_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    parser6_in = stdin;
    parser6_out = stdout;
#else
    parser6_in = (FILE *) 0;
    parser6_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * parser6_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* parser6_lex_destroy is for both reentrant and non-reentrant scanners. */
int parser6_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		parser6__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		parser6_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	parser6_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * parser6_lex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *parser6_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *parser6_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void parser6_free (void * ptr )
{
	free( (char *) ptr );	/* see parser6_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 2265 "dhcp6_lexer.ll"



using namespace isc::dhcp;

void
Parser6Context::scanStringBegin(const std::string& str, ParserType parser_type)
{
    start_token_flag = true;
    start_token_value = parser_type;

    file_ = "<string>";
    sfile_ = 0;
    loc_.initialize(&file_);
    parser6__flex_debug = trace_scanning_;
    YY_BUFFER_STATE buffer;
    buffer = parser6__scan_bytes(str.c_str(), str.size());
    if (!buffer) {
        fatal("cannot scan string");
        /* fatal() throws an exception so this can't be reached */
    }
}

void
Parser6Context::scanFileBegin(FILE * f,
                              const std::string& filename,
                              ParserType parser_type)
{
    start_token_flag = true;
    start_token_value = parser_type;

    file_ = filename;
    sfile_ = f;
    loc_.initialize(&file_);
    parser6__flex_debug = trace_scanning_;
    YY_BUFFER_STATE buffer;

    /* See dhcp6_lexer.cc header for available definitions */
    buffer = parser6__create_buffer(f, 65536 /*buffer size*/);
    if (!buffer) {
        fatal("cannot scan file " + filename);
    }
    parser6__switch_to_buffer(buffer);
}

void
Parser6Context::scanEnd() {
    if (sfile_)
        fclose(sfile_);
    sfile_ = 0;
    static_cast<void>(parser6_lex_destroy());
    /* Close files */
    while (!sfiles_.empty()) {
        FILE* f = sfiles_.back();
        if (f) {
            fclose(f);
        }
        sfiles_.pop_back();
    }
    /* Delete states */
    while (!states_.empty()) {
        parser6__delete_buffer(states_.back());
        states_.pop_back();
    }
}

void
Parser6Context::includeFile(const std::string& filename) {
    if (states_.size() > 10) {
        fatal("Too many nested include.");
    }

    FILE* f = fopen(filename.c_str(), "r");
    if (!f) {
        fatal("Can't open include file " + filename);
    }
    if (sfile_) {
        sfiles_.push_back(sfile_);
    }
    sfile_ = f;
    states_.push_back(YY_CURRENT_BUFFER);
    YY_BUFFER_STATE buffer;
    buffer = parser6__create_buffer(f, 65536 /*buffer size*/);
    if (!buffer) {
        fatal( "Can't scan include file " + filename);
    }
    parser6__switch_to_buffer(buffer);
    files_.push_back(file_);
    file_ = filename;
    locs_.push_back(loc_);
    loc_.initialize(&file_);

    BEGIN(INITIAL);
}

namespace {
/** To avoid unused function error */
class Dummy {
    /* cppcheck-suppress unusedPrivateFunction */
    void dummy() { yy_fatal_error("Fix me: how to disable its definition?"); }
};
}
#endif /* !__clang_analyzer__ */

